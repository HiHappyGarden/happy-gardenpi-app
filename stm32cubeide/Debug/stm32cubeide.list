
stm32cubeide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035c0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003798  08003798  00013798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037d8  080037d8  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080037d8  080037d8  000137d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037e0  080037e0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037e0  080037e0  000137e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037e4  080037e4  000137e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080037e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000014  080037fc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  080037fc  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d2a0  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d55  00000000  00000000  0002d327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f0  00000000  00000000  0002f080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007a4  00000000  00000000  0002fa70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024050  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c325  00000000  00000000  00054264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5a07  00000000  00000000  00060589  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027d0  00000000  00000000  00145f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00148760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000014 	.word	0x20000014
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003780 	.word	0x08003780

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000018 	.word	0x20000018
 8000214:	08003780 	.word	0x08003780

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000228:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fa15 	bl	8000946 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f81a 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 f8ae 	bl	8000680 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000524:	f000 f862 	bl	80005ec <MX_LPUART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    if(HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, sizeof(msg), 1000)!= HAL_OK)
 8000528:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052c:	2206      	movs	r2, #6
 800052e:	4907      	ldr	r1, [pc, #28]	; (800054c <main+0x38>)
 8000530:	4807      	ldr	r0, [pc, #28]	; (8000550 <main+0x3c>)
 8000532:	f001 fea9 	bl	8002288 <HAL_UART_Transmit>
 8000536:	4603      	mov	r3, r0
 8000538:	2b00      	cmp	r3, #0
 800053a:	d001      	beq.n	8000540 <main+0x2c>
	    {
	      /* Transfer error in transmission process */
	      Error_Handler();
 800053c:	f000 f902 	bl	8000744 <Error_Handler>
	    }

	    //BSP_LED_Toggle(LED2);
	    HAL_Delay(1000);
 8000540:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000544:	f000 fa70 	bl	8000a28 <HAL_Delay>
	    if(HAL_UART_Transmit(&hlpuart1, (uint8_t*)msg, sizeof(msg), 1000)!= HAL_OK)
 8000548:	e7ee      	b.n	8000528 <main+0x14>
 800054a:	bf00      	nop
 800054c:	20000000 	.word	0x20000000
 8000550:	20000030 	.word	0x20000030

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0318 	add.w	r3, r7, #24
 800055e:	2238      	movs	r2, #56	; 0x38
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f003 f8e0 	bl	8003728 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000576:	2000      	movs	r0, #0
 8000578:	f000 fe06 	bl	8001188 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800057c:	2302      	movs	r3, #2
 800057e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000586:	2340      	movs	r3, #64	; 0x40
 8000588:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058a:	2302      	movs	r3, #2
 800058c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800058e:	2302      	movs	r3, #2
 8000590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000592:	2304      	movs	r3, #4
 8000594:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000596:	2355      	movs	r3, #85	; 0x55
 8000598:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800059a:	2302      	movs	r3, #2
 800059c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800059e:	2302      	movs	r3, #2
 80005a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	f107 0318 	add.w	r3, r7, #24
 80005aa:	4618      	mov	r0, r3
 80005ac:	f000 fea0 	bl	80012f0 <HAL_RCC_OscConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005b6:	f000 f8c5 	bl	8000744 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ba:	230f      	movs	r3, #15
 80005bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005be:	2303      	movs	r3, #3
 80005c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2104      	movs	r1, #4
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 f99e 	bl	8001914 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005de:	f000 f8b1 	bl	8000744 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3750      	adds	r7, #80	; 0x50
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80005f0:	4b21      	ldr	r3, [pc, #132]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 80005f2:	4a22      	ldr	r2, [pc, #136]	; (800067c <MX_LPUART1_UART_Init+0x90>)
 80005f4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80005f6:	4b20      	ldr	r3, [pc, #128]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 80005f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005fc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005fe:	4b1e      	ldr	r3, [pc, #120]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000604:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800060a:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000610:	4b19      	ldr	r3, [pc, #100]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000612:	220c      	movs	r2, #12
 8000614:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000616:	4b18      	ldr	r3, [pc, #96]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800061c:	4b16      	ldr	r3, [pc, #88]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 800061e:	2200      	movs	r2, #0
 8000620:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000624:	2200      	movs	r2, #0
 8000626:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 800062a:	2200      	movs	r2, #0
 800062c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800062e:	4812      	ldr	r0, [pc, #72]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000630:	f001 fdda 	bl	80021e8 <HAL_UART_Init>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800063a:	f000 f883 	bl	8000744 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800063e:	2100      	movs	r1, #0
 8000640:	480d      	ldr	r0, [pc, #52]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000642:	f002 ffa6 	bl	8003592 <HAL_UARTEx_SetTxFifoThreshold>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800064c:	f000 f87a 	bl	8000744 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000650:	2100      	movs	r1, #0
 8000652:	4809      	ldr	r0, [pc, #36]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000654:	f002 ffdb 	bl	800360e <HAL_UARTEx_SetRxFifoThreshold>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800065e:	f000 f871 	bl	8000744 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_LPUART1_UART_Init+0x8c>)
 8000664:	f002 ff5c 	bl	8003520 <HAL_UARTEx_DisableFifoMode>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800066e:	f000 f869 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000030 	.word	0x20000030
 800067c:	40008000 	.word	0x40008000

08000680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]
 8000694:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000696:	4b29      	ldr	r3, [pc, #164]	; (800073c <MX_GPIO_Init+0xbc>)
 8000698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069a:	4a28      	ldr	r2, [pc, #160]	; (800073c <MX_GPIO_Init+0xbc>)
 800069c:	f043 0304 	orr.w	r3, r3, #4
 80006a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a2:	4b26      	ldr	r3, [pc, #152]	; (800073c <MX_GPIO_Init+0xbc>)
 80006a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006a6:	f003 0304 	and.w	r3, r3, #4
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006ae:	4b23      	ldr	r3, [pc, #140]	; (800073c <MX_GPIO_Init+0xbc>)
 80006b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b2:	4a22      	ldr	r2, [pc, #136]	; (800073c <MX_GPIO_Init+0xbc>)
 80006b4:	f043 0320 	orr.w	r3, r3, #32
 80006b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ba:	4b20      	ldr	r3, [pc, #128]	; (800073c <MX_GPIO_Init+0xbc>)
 80006bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006be:	f003 0320 	and.w	r3, r3, #32
 80006c2:	607b      	str	r3, [r7, #4]
 80006c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	4b1d      	ldr	r3, [pc, #116]	; (800073c <MX_GPIO_Init+0xbc>)
 80006c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ca:	4a1c      	ldr	r2, [pc, #112]	; (800073c <MX_GPIO_Init+0xbc>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d2:	4b1a      	ldr	r3, [pc, #104]	; (800073c <MX_GPIO_Init+0xbc>)
 80006d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006de:	2200      	movs	r2, #0
 80006e0:	2120      	movs	r1, #32
 80006e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e6:	f000 fd13 	bl	8001110 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006f0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f6:	2300      	movs	r3, #0
 80006f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006fa:	f107 030c 	add.w	r3, r7, #12
 80006fe:	4619      	mov	r1, r3
 8000700:	480f      	ldr	r0, [pc, #60]	; (8000740 <MX_GPIO_Init+0xc0>)
 8000702:	f000 fb83 	bl	8000e0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000706:	2320      	movs	r3, #32
 8000708:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800070a:	2301      	movs	r3, #1
 800070c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070e:	2300      	movs	r3, #0
 8000710:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000712:	2300      	movs	r3, #0
 8000714:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000716:	f107 030c 	add.w	r3, r7, #12
 800071a:	4619      	mov	r1, r3
 800071c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000720:	f000 fb74 	bl	8000e0c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000724:	2200      	movs	r2, #0
 8000726:	2100      	movs	r1, #0
 8000728:	2028      	movs	r0, #40	; 0x28
 800072a:	f000 fa7a 	bl	8000c22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800072e:	2028      	movs	r0, #40	; 0x28
 8000730:	f000 fa91 	bl	8000c56 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000734:	bf00      	nop
 8000736:	3720      	adds	r7, #32
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40021000 	.word	0x40021000
 8000740:	48000800 	.word	0x48000800

08000744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000748:	b672      	cpsid	i
}
 800074a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074c:	e7fe      	b.n	800074c <Error_Handler+0x8>
	...

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <HAL_MspInit+0x44>)
 8000758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800075a:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <HAL_MspInit+0x44>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6613      	str	r3, [r2, #96]	; 0x60
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <HAL_MspInit+0x44>)
 8000764:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <HAL_MspInit+0x44>)
 8000770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000772:	4a08      	ldr	r2, [pc, #32]	; (8000794 <HAL_MspInit+0x44>)
 8000774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000778:	6593      	str	r3, [r2, #88]	; 0x58
 800077a:	4b06      	ldr	r3, [pc, #24]	; (8000794 <HAL_MspInit+0x44>)
 800077c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800077e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000786:	f000 fda3 	bl	80012d0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	40021000 	.word	0x40021000

08000798 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b09e      	sub	sp, #120	; 0x78
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	2254      	movs	r2, #84	; 0x54
 80007b6:	2100      	movs	r1, #0
 80007b8:	4618      	mov	r0, r3
 80007ba:	f002 ffb5 	bl	8003728 <memset>
  if(huart->Instance==LPUART1)
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	4a23      	ldr	r2, [pc, #140]	; (8000850 <HAL_UART_MspInit+0xb8>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	d13e      	bne.n	8000846 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80007c8:	2320      	movs	r3, #32
 80007ca:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007d0:	f107 0310 	add.w	r3, r7, #16
 80007d4:	4618      	mov	r0, r3
 80007d6:	f001 fab9 	bl	8001d4c <HAL_RCCEx_PeriphCLKConfig>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80007e0:	f7ff ffb0 	bl	8000744 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80007e4:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <HAL_UART_MspInit+0xbc>)
 80007e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007e8:	4a1a      	ldr	r2, [pc, #104]	; (8000854 <HAL_UART_MspInit+0xbc>)
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	65d3      	str	r3, [r2, #92]	; 0x5c
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <HAL_UART_MspInit+0xbc>)
 80007f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80007f4:	f003 0301 	and.w	r3, r3, #1
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <HAL_UART_MspInit+0xbc>)
 80007fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000800:	4a14      	ldr	r2, [pc, #80]	; (8000854 <HAL_UART_MspInit+0xbc>)
 8000802:	f043 0301 	orr.w	r3, r3, #1
 8000806:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <HAL_UART_MspInit+0xbc>)
 800080a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080c:	f003 0301 	and.w	r3, r3, #1
 8000810:	60bb      	str	r3, [r7, #8]
 8000812:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000814:	230c      	movs	r3, #12
 8000816:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000818:	2302      	movs	r3, #2
 800081a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000824:	230c      	movs	r3, #12
 8000826:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000828:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800082c:	4619      	mov	r1, r3
 800082e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000832:	f000 faeb 	bl	8000e0c <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	2100      	movs	r1, #0
 800083a:	205b      	movs	r0, #91	; 0x5b
 800083c:	f000 f9f1 	bl	8000c22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000840:	205b      	movs	r0, #91	; 0x5b
 8000842:	f000 fa08 	bl	8000c56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000846:	bf00      	nop
 8000848:	3778      	adds	r7, #120	; 0x78
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40008000 	.word	0x40008000
 8000854:	40021000 	.word	0x40021000

08000858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800085c:	e7fe      	b.n	800085c <NMI_Handler+0x4>

0800085e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <HardFault_Handler+0x4>

08000864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <MemManage_Handler+0x4>

0800086a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <BusFault_Handler+0x4>

08000870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <UsageFault_Handler+0x4>

08000876 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000888:	bf00      	nop
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr

08000892 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008a4:	f000 f8a2 	bl	80009ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a8:	bf00      	nop
 80008aa:	bd80      	pop	{r7, pc}

080008ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80008b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80008b4:	f000 fc44 	bl	8001140 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}

080008bc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80008c0:	4802      	ldr	r0, [pc, #8]	; (80008cc <LPUART1_IRQHandler+0x10>)
 80008c2:	f001 fd6f 	bl	80023a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	20000030 	.word	0x20000030

080008d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <SystemInit+0x20>)
 80008d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008da:	4a05      	ldr	r2, [pc, #20]	; (80008f0 <SystemInit+0x20>)
 80008dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e4:	bf00      	nop
 80008e6:	46bd      	mov	sp, r7
 80008e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008f4:	480d      	ldr	r0, [pc, #52]	; (800092c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008f6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008f8:	f7ff ffea 	bl	80008d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008fc:	480c      	ldr	r0, [pc, #48]	; (8000930 <LoopForever+0x6>)
  ldr r1, =_edata
 80008fe:	490d      	ldr	r1, [pc, #52]	; (8000934 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000900:	4a0d      	ldr	r2, [pc, #52]	; (8000938 <LoopForever+0xe>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000904:	e002      	b.n	800090c <LoopCopyDataInit>

08000906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800090a:	3304      	adds	r3, #4

0800090c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800090c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800090e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000910:	d3f9      	bcc.n	8000906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000912:	4a0a      	ldr	r2, [pc, #40]	; (800093c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000914:	4c0a      	ldr	r4, [pc, #40]	; (8000940 <LoopForever+0x16>)
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000918:	e001      	b.n	800091e <LoopFillZerobss>

0800091a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800091a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800091c:	3204      	adds	r2, #4

0800091e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800091e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000920:	d3fb      	bcc.n	800091a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000922:	f002 ff09 	bl	8003738 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000926:	f7ff fdf5 	bl	8000514 <main>

0800092a <LoopForever>:

LoopForever:
    b LoopForever
 800092a:	e7fe      	b.n	800092a <LoopForever>
  ldr   r0, =_estack
 800092c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000934:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000938:	080037e8 	.word	0x080037e8
  ldr r2, =_sbss
 800093c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000940:	200000c8 	.word	0x200000c8

08000944 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC1_2_IRQHandler>

08000946 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800094c:	2300      	movs	r3, #0
 800094e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000950:	2003      	movs	r0, #3
 8000952:	f000 f95b 	bl	8000c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000956:	2000      	movs	r0, #0
 8000958:	f000 f80e 	bl	8000978 <HAL_InitTick>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d002      	beq.n	8000968 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000962:	2301      	movs	r3, #1
 8000964:	71fb      	strb	r3, [r7, #7]
 8000966:	e001      	b.n	800096c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000968:	f7ff fef2 	bl	8000750 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800096c:	79fb      	ldrb	r3, [r7, #7]

}
 800096e:	4618      	mov	r0, r3
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b084      	sub	sp, #16
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000980:	2300      	movs	r3, #0
 8000982:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <HAL_InitTick+0x68>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	2b00      	cmp	r3, #0
 800098a:	d022      	beq.n	80009d2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800098c:	4b15      	ldr	r3, [pc, #84]	; (80009e4 <HAL_InitTick+0x6c>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <HAL_InitTick+0x68>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000998:	fbb1 f3f3 	udiv	r3, r1, r3
 800099c:	fbb2 f3f3 	udiv	r3, r2, r3
 80009a0:	4618      	mov	r0, r3
 80009a2:	f000 f966 	bl	8000c72 <HAL_SYSTICK_Config>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d10f      	bne.n	80009cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b0f      	cmp	r3, #15
 80009b0:	d809      	bhi.n	80009c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b2:	2200      	movs	r2, #0
 80009b4:	6879      	ldr	r1, [r7, #4]
 80009b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009ba:	f000 f932 	bl	8000c22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009be:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <HAL_InitTick+0x70>)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	6013      	str	r3, [r2, #0]
 80009c4:	e007      	b.n	80009d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80009c6:	2301      	movs	r3, #1
 80009c8:	73fb      	strb	r3, [r7, #15]
 80009ca:	e004      	b.n	80009d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009cc:	2301      	movs	r3, #1
 80009ce:	73fb      	strb	r3, [r7, #15]
 80009d0:	e001      	b.n	80009d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009d2:	2301      	movs	r3, #1
 80009d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	20000010 	.word	0x20000010
 80009e4:	20000008 	.word	0x20000008
 80009e8:	2000000c 	.word	0x2000000c

080009ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <HAL_IncTick+0x1c>)
 80009f2:	681a      	ldr	r2, [r3, #0]
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <HAL_IncTick+0x20>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4413      	add	r3, r2
 80009fa:	4a03      	ldr	r2, [pc, #12]	; (8000a08 <HAL_IncTick+0x1c>)
 80009fc:	6013      	str	r3, [r2, #0]
}
 80009fe:	bf00      	nop
 8000a00:	46bd      	mov	sp, r7
 8000a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a06:	4770      	bx	lr
 8000a08:	200000c4 	.word	0x200000c4
 8000a0c:	20000010 	.word	0x20000010

08000a10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return uwTick;
 8000a14:	4b03      	ldr	r3, [pc, #12]	; (8000a24 <HAL_GetTick+0x14>)
 8000a16:	681b      	ldr	r3, [r3, #0]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	200000c4 	.word	0x200000c4

08000a28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a30:	f7ff ffee 	bl	8000a10 <HAL_GetTick>
 8000a34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000a40:	d004      	beq.n	8000a4c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <HAL_Delay+0x40>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	4413      	add	r3, r2
 8000a4a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a4c:	bf00      	nop
 8000a4e:	f7ff ffdf 	bl	8000a10 <HAL_GetTick>
 8000a52:	4602      	mov	r2, r0
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	68fa      	ldr	r2, [r7, #12]
 8000a5a:	429a      	cmp	r2, r3
 8000a5c:	d8f7      	bhi.n	8000a4e <HAL_Delay+0x26>
  {
  }
}
 8000a5e:	bf00      	nop
 8000a60:	bf00      	nop
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20000010 	.word	0x20000010

08000a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	f003 0307 	and.w	r3, r3, #7
 8000a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a7c:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a82:	68ba      	ldr	r2, [r7, #8]
 8000a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a88:	4013      	ands	r3, r2
 8000a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a9e:	4a04      	ldr	r2, [pc, #16]	; (8000ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	60d3      	str	r3, [r2, #12]
}
 8000aa4:	bf00      	nop
 8000aa6:	3714      	adds	r7, #20
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ab8:	4b04      	ldr	r3, [pc, #16]	; (8000acc <__NVIC_GetPriorityGrouping+0x18>)
 8000aba:	68db      	ldr	r3, [r3, #12]
 8000abc:	0a1b      	lsrs	r3, r3, #8
 8000abe:	f003 0307 	and.w	r3, r3, #7
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	db0b      	blt.n	8000afa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ae2:	79fb      	ldrb	r3, [r7, #7]
 8000ae4:	f003 021f 	and.w	r2, r3, #31
 8000ae8:	4907      	ldr	r1, [pc, #28]	; (8000b08 <__NVIC_EnableIRQ+0x38>)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	095b      	lsrs	r3, r3, #5
 8000af0:	2001      	movs	r0, #1
 8000af2:	fa00 f202 	lsl.w	r2, r0, r2
 8000af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000afa:	bf00      	nop
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	e000e100 	.word	0xe000e100

08000b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	4603      	mov	r3, r0
 8000b14:	6039      	str	r1, [r7, #0]
 8000b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	db0a      	blt.n	8000b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	490c      	ldr	r1, [pc, #48]	; (8000b58 <__NVIC_SetPriority+0x4c>)
 8000b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2a:	0112      	lsls	r2, r2, #4
 8000b2c:	b2d2      	uxtb	r2, r2
 8000b2e:	440b      	add	r3, r1
 8000b30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b34:	e00a      	b.n	8000b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b36:	683b      	ldr	r3, [r7, #0]
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	4908      	ldr	r1, [pc, #32]	; (8000b5c <__NVIC_SetPriority+0x50>)
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	f003 030f 	and.w	r3, r3, #15
 8000b42:	3b04      	subs	r3, #4
 8000b44:	0112      	lsls	r2, r2, #4
 8000b46:	b2d2      	uxtb	r2, r2
 8000b48:	440b      	add	r3, r1
 8000b4a:	761a      	strb	r2, [r3, #24]
}
 8000b4c:	bf00      	nop
 8000b4e:	370c      	adds	r7, #12
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	e000e100 	.word	0xe000e100
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b089      	sub	sp, #36	; 0x24
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	60b9      	str	r1, [r7, #8]
 8000b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b74:	69fb      	ldr	r3, [r7, #28]
 8000b76:	f1c3 0307 	rsb	r3, r3, #7
 8000b7a:	2b04      	cmp	r3, #4
 8000b7c:	bf28      	it	cs
 8000b7e:	2304      	movcs	r3, #4
 8000b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	3304      	adds	r3, #4
 8000b86:	2b06      	cmp	r3, #6
 8000b88:	d902      	bls.n	8000b90 <NVIC_EncodePriority+0x30>
 8000b8a:	69fb      	ldr	r3, [r7, #28]
 8000b8c:	3b03      	subs	r3, #3
 8000b8e:	e000      	b.n	8000b92 <NVIC_EncodePriority+0x32>
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9e:	43da      	mvns	r2, r3
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	401a      	ands	r2, r3
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ba8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb2:	43d9      	mvns	r1, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bb8:	4313      	orrs	r3, r2
         );
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3724      	adds	r7, #36	; 0x24
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
	...

08000bc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3b01      	subs	r3, #1
 8000bd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bd8:	d301      	bcc.n	8000bde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bda:	2301      	movs	r3, #1
 8000bdc:	e00f      	b.n	8000bfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bde:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <SysTick_Config+0x40>)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000be6:	210f      	movs	r1, #15
 8000be8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000bec:	f7ff ff8e 	bl	8000b0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <SysTick_Config+0x40>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bf6:	4b04      	ldr	r3, [pc, #16]	; (8000c08 <SysTick_Config+0x40>)
 8000bf8:	2207      	movs	r2, #7
 8000bfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	e000e010 	.word	0xe000e010

08000c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c14:	6878      	ldr	r0, [r7, #4]
 8000c16:	f7ff ff29 	bl	8000a6c <__NVIC_SetPriorityGrouping>
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	b086      	sub	sp, #24
 8000c26:	af00      	add	r7, sp, #0
 8000c28:	4603      	mov	r3, r0
 8000c2a:	60b9      	str	r1, [r7, #8]
 8000c2c:	607a      	str	r2, [r7, #4]
 8000c2e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c30:	f7ff ff40 	bl	8000ab4 <__NVIC_GetPriorityGrouping>
 8000c34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	68b9      	ldr	r1, [r7, #8]
 8000c3a:	6978      	ldr	r0, [r7, #20]
 8000c3c:	f7ff ff90 	bl	8000b60 <NVIC_EncodePriority>
 8000c40:	4602      	mov	r2, r0
 8000c42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c46:	4611      	mov	r1, r2
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ff5f 	bl	8000b0c <__NVIC_SetPriority>
}
 8000c4e:	bf00      	nop
 8000c50:	3718      	adds	r7, #24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}

08000c56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c56:	b580      	push	{r7, lr}
 8000c58:	b082      	sub	sp, #8
 8000c5a:	af00      	add	r7, sp, #0
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff ff33 	bl	8000ad0 <__NVIC_EnableIRQ>
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}

08000c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff ffa4 	bl	8000bc8 <SysTick_Config>
 8000c80:	4603      	mov	r3, r0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b085      	sub	sp, #20
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c92:	2300      	movs	r3, #0
 8000c94:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	2b02      	cmp	r3, #2
 8000ca0:	d005      	beq.n	8000cae <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	2204      	movs	r2, #4
 8000ca6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	73fb      	strb	r3, [r7, #15]
 8000cac:	e037      	b.n	8000d1e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f022 020e 	bic.w	r2, r2, #14
 8000cbc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000ccc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f022 0201 	bic.w	r2, r2, #1
 8000cdc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ce2:	f003 021f 	and.w	r2, r3, #31
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	2101      	movs	r1, #1
 8000cec:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000cfa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d00c      	beq.n	8000d1e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d12:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d18:	687a      	ldr	r2, [r7, #4]
 8000d1a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000d1c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2201      	movs	r2, #1
 8000d22:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d44:	2300      	movs	r3, #0
 8000d46:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	2b02      	cmp	r3, #2
 8000d52:	d00d      	beq.n	8000d70 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2204      	movs	r2, #4
 8000d58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2200      	movs	r2, #0
 8000d66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	73fb      	strb	r3, [r7, #15]
 8000d6e:	e047      	b.n	8000e00 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f022 020e 	bic.w	r2, r2, #14
 8000d7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f022 0201 	bic.w	r2, r2, #1
 8000d8e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d9a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000d9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da4:	f003 021f 	and.w	r2, r3, #31
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dac:	2101      	movs	r1, #1
 8000dae:	fa01 f202 	lsl.w	r2, r1, r2
 8000db2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000dbc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d00c      	beq.n	8000de0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000dd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000dd4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dda:	687a      	ldr	r2, [r7, #4]
 8000ddc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000dde:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2201      	movs	r2, #1
 8000de4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	2200      	movs	r2, #0
 8000dec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d003      	beq.n	8000e00 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	4798      	blx	r3
    }
  }
  return status;
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
	...

08000e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b087      	sub	sp, #28
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e16:	2300      	movs	r3, #0
 8000e18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e1a:	e15a      	b.n	80010d2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	2101      	movs	r1, #1
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	fa01 f303 	lsl.w	r3, r1, r3
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f000 814c 	beq.w	80010cc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 0303 	and.w	r3, r3, #3
 8000e3c:	2b01      	cmp	r3, #1
 8000e3e:	d005      	beq.n	8000e4c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e48:	2b02      	cmp	r3, #2
 8000e4a:	d130      	bne.n	8000eae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	2203      	movs	r2, #3
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	68da      	ldr	r2, [r3, #12]
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e82:	2201      	movs	r2, #1
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	43db      	mvns	r3, r3
 8000e8c:	693a      	ldr	r2, [r7, #16]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	091b      	lsrs	r3, r3, #4
 8000e98:	f003 0201 	and.w	r2, r3, #1
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	2b03      	cmp	r3, #3
 8000eb8:	d017      	beq.n	8000eea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	68db      	ldr	r3, [r3, #12]
 8000ebe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	689a      	ldr	r2, [r3, #8]
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	fa02 f303 	lsl.w	r3, r2, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	f003 0303 	and.w	r3, r3, #3
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d123      	bne.n	8000f3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	08da      	lsrs	r2, r3, #3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	3208      	adds	r2, #8
 8000efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	220f      	movs	r2, #15
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	43db      	mvns	r3, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	691a      	ldr	r2, [r3, #16]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	08da      	lsrs	r2, r3, #3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3208      	adds	r2, #8
 8000f38:	6939      	ldr	r1, [r7, #16]
 8000f3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	2203      	movs	r2, #3
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4013      	ands	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0203 	and.w	r2, r3, #3
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	005b      	lsls	r3, r3, #1
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	4313      	orrs	r3, r2
 8000f6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f000 80a6 	beq.w	80010cc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f80:	4b5b      	ldr	r3, [pc, #364]	; (80010f0 <HAL_GPIO_Init+0x2e4>)
 8000f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f84:	4a5a      	ldr	r2, [pc, #360]	; (80010f0 <HAL_GPIO_Init+0x2e4>)
 8000f86:	f043 0301 	orr.w	r3, r3, #1
 8000f8a:	6613      	str	r3, [r2, #96]	; 0x60
 8000f8c:	4b58      	ldr	r3, [pc, #352]	; (80010f0 <HAL_GPIO_Init+0x2e4>)
 8000f8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f90:	f003 0301 	and.w	r3, r3, #1
 8000f94:	60bb      	str	r3, [r7, #8]
 8000f96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f98:	4a56      	ldr	r2, [pc, #344]	; (80010f4 <HAL_GPIO_Init+0x2e8>)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	089b      	lsrs	r3, r3, #2
 8000f9e:	3302      	adds	r3, #2
 8000fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f003 0303 	and.w	r3, r3, #3
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	220f      	movs	r2, #15
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	693a      	ldr	r2, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fc2:	d01f      	beq.n	8001004 <HAL_GPIO_Init+0x1f8>
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a4c      	ldr	r2, [pc, #304]	; (80010f8 <HAL_GPIO_Init+0x2ec>)
 8000fc8:	4293      	cmp	r3, r2
 8000fca:	d019      	beq.n	8001000 <HAL_GPIO_Init+0x1f4>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	4a4b      	ldr	r2, [pc, #300]	; (80010fc <HAL_GPIO_Init+0x2f0>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d013      	beq.n	8000ffc <HAL_GPIO_Init+0x1f0>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a4a      	ldr	r2, [pc, #296]	; (8001100 <HAL_GPIO_Init+0x2f4>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d00d      	beq.n	8000ff8 <HAL_GPIO_Init+0x1ec>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	4a49      	ldr	r2, [pc, #292]	; (8001104 <HAL_GPIO_Init+0x2f8>)
 8000fe0:	4293      	cmp	r3, r2
 8000fe2:	d007      	beq.n	8000ff4 <HAL_GPIO_Init+0x1e8>
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	4a48      	ldr	r2, [pc, #288]	; (8001108 <HAL_GPIO_Init+0x2fc>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d101      	bne.n	8000ff0 <HAL_GPIO_Init+0x1e4>
 8000fec:	2305      	movs	r3, #5
 8000fee:	e00a      	b.n	8001006 <HAL_GPIO_Init+0x1fa>
 8000ff0:	2306      	movs	r3, #6
 8000ff2:	e008      	b.n	8001006 <HAL_GPIO_Init+0x1fa>
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	e006      	b.n	8001006 <HAL_GPIO_Init+0x1fa>
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	e004      	b.n	8001006 <HAL_GPIO_Init+0x1fa>
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	e002      	b.n	8001006 <HAL_GPIO_Init+0x1fa>
 8001000:	2301      	movs	r3, #1
 8001002:	e000      	b.n	8001006 <HAL_GPIO_Init+0x1fa>
 8001004:	2300      	movs	r3, #0
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	f002 0203 	and.w	r2, r2, #3
 800100c:	0092      	lsls	r2, r2, #2
 800100e:	4093      	lsls	r3, r2
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001016:	4937      	ldr	r1, [pc, #220]	; (80010f4 <HAL_GPIO_Init+0x2e8>)
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	089b      	lsrs	r3, r3, #2
 800101c:	3302      	adds	r3, #2
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001024:	4b39      	ldr	r3, [pc, #228]	; (800110c <HAL_GPIO_Init+0x300>)
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	43db      	mvns	r3, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800103c:	2b00      	cmp	r3, #0
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001048:	4a30      	ldr	r2, [pc, #192]	; (800110c <HAL_GPIO_Init+0x300>)
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800104e:	4b2f      	ldr	r3, [pc, #188]	; (800110c <HAL_GPIO_Init+0x300>)
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	43db      	mvns	r3, r3
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4013      	ands	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4313      	orrs	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001072:	4a26      	ldr	r2, [pc, #152]	; (800110c <HAL_GPIO_Init+0x300>)
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001078:	4b24      	ldr	r3, [pc, #144]	; (800110c <HAL_GPIO_Init+0x300>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	43db      	mvns	r3, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800109c:	4a1b      	ldr	r2, [pc, #108]	; (800110c <HAL_GPIO_Init+0x300>)
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80010a2:	4b1a      	ldr	r3, [pc, #104]	; (800110c <HAL_GPIO_Init+0x300>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	43db      	mvns	r3, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80010be:	693a      	ldr	r2, [r7, #16]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010c6:	4a11      	ldr	r2, [pc, #68]	; (800110c <HAL_GPIO_Init+0x300>)
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	3301      	adds	r3, #1
 80010d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	fa22 f303 	lsr.w	r3, r2, r3
 80010dc:	2b00      	cmp	r3, #0
 80010de:	f47f ae9d 	bne.w	8000e1c <HAL_GPIO_Init+0x10>
  }
}
 80010e2:	bf00      	nop
 80010e4:	bf00      	nop
 80010e6:	371c      	adds	r7, #28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40010000 	.word	0x40010000
 80010f8:	48000400 	.word	0x48000400
 80010fc:	48000800 	.word	0x48000800
 8001100:	48000c00 	.word	0x48000c00
 8001104:	48001000 	.word	0x48001000
 8001108:	48001400 	.word	0x48001400
 800110c:	40010400 	.word	0x40010400

08001110 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	807b      	strh	r3, [r7, #2]
 800111c:	4613      	mov	r3, r2
 800111e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001120:	787b      	ldrb	r3, [r7, #1]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d003      	beq.n	800112e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001126:	887a      	ldrh	r2, [r7, #2]
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800112c:	e002      	b.n	8001134 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800112e:	887a      	ldrh	r2, [r7, #2]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800114c:	695a      	ldr	r2, [r3, #20]
 800114e:	88fb      	ldrh	r3, [r7, #6]
 8001150:	4013      	ands	r3, r2
 8001152:	2b00      	cmp	r3, #0
 8001154:	d006      	beq.n	8001164 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001156:	4a05      	ldr	r2, [pc, #20]	; (800116c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001158:	88fb      	ldrh	r3, [r7, #6]
 800115a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800115c:	88fb      	ldrh	r3, [r7, #6]
 800115e:	4618      	mov	r0, r3
 8001160:	f000 f806 	bl	8001170 <HAL_GPIO_EXTI_Callback>
  }
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	40010400 	.word	0x40010400

08001170 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
	...

08001188 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d141      	bne.n	800121a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001196:	4b4b      	ldr	r3, [pc, #300]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800119e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011a2:	d131      	bne.n	8001208 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011a4:	4b47      	ldr	r3, [pc, #284]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011aa:	4a46      	ldr	r2, [pc, #280]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011b0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b4:	4b43      	ldr	r3, [pc, #268]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011bc:	4a41      	ldr	r2, [pc, #260]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011c2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011c4:	4b40      	ldr	r3, [pc, #256]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2232      	movs	r2, #50	; 0x32
 80011ca:	fb02 f303 	mul.w	r3, r2, r3
 80011ce:	4a3f      	ldr	r2, [pc, #252]	; (80012cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 80011d0:	fba2 2303 	umull	r2, r3, r2, r3
 80011d4:	0c9b      	lsrs	r3, r3, #18
 80011d6:	3301      	adds	r3, #1
 80011d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011da:	e002      	b.n	80011e2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	3b01      	subs	r3, #1
 80011e0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011e2:	4b38      	ldr	r3, [pc, #224]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011ee:	d102      	bne.n	80011f6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f2      	bne.n	80011dc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011f6:	4b33      	ldr	r3, [pc, #204]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f8:	695b      	ldr	r3, [r3, #20]
 80011fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001202:	d158      	bne.n	80012b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001204:	2303      	movs	r3, #3
 8001206:	e057      	b.n	80012b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001208:	4b2e      	ldr	r3, [pc, #184]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800120a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800120e:	4a2d      	ldr	r2, [pc, #180]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001210:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001214:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001218:	e04d      	b.n	80012b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001220:	d141      	bne.n	80012a6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001222:	4b28      	ldr	r3, [pc, #160]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800122a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800122e:	d131      	bne.n	8001294 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001230:	4b24      	ldr	r3, [pc, #144]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001232:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001236:	4a23      	ldr	r2, [pc, #140]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001238:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800123c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001240:	4b20      	ldr	r3, [pc, #128]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001248:	4a1e      	ldr	r2, [pc, #120]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800124a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800124e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001250:	4b1d      	ldr	r3, [pc, #116]	; (80012c8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2232      	movs	r2, #50	; 0x32
 8001256:	fb02 f303 	mul.w	r3, r2, r3
 800125a:	4a1c      	ldr	r2, [pc, #112]	; (80012cc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800125c:	fba2 2303 	umull	r2, r3, r2, r3
 8001260:	0c9b      	lsrs	r3, r3, #18
 8001262:	3301      	adds	r3, #1
 8001264:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001266:	e002      	b.n	800126e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	3b01      	subs	r3, #1
 800126c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800126e:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800127a:	d102      	bne.n	8001282 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d1f2      	bne.n	8001268 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800128e:	d112      	bne.n	80012b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001290:	2303      	movs	r3, #3
 8001292:	e011      	b.n	80012b8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001294:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800129a:	4a0a      	ldr	r2, [pc, #40]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800129c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80012a4:	e007      	b.n	80012b6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012a6:	4b07      	ldr	r3, [pc, #28]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012ae:	4a05      	ldr	r2, [pc, #20]	; (80012c4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012b4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	40007000 	.word	0x40007000
 80012c8:	20000008 	.word	0x20000008
 80012cc:	431bde83 	.word	0x431bde83

080012d0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	4a04      	ldr	r2, [pc, #16]	; (80012ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80012da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012de:	6093      	str	r3, [r2, #8]
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	40007000 	.word	0x40007000

080012f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e2fe      	b.n	8001900 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	2b00      	cmp	r3, #0
 800130c:	d075      	beq.n	80013fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800130e:	4b97      	ldr	r3, [pc, #604]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 030c 	and.w	r3, r3, #12
 8001316:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001318:	4b94      	ldr	r3, [pc, #592]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	2b0c      	cmp	r3, #12
 8001326:	d102      	bne.n	800132e <HAL_RCC_OscConfig+0x3e>
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	2b03      	cmp	r3, #3
 800132c:	d002      	beq.n	8001334 <HAL_RCC_OscConfig+0x44>
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	2b08      	cmp	r3, #8
 8001332:	d10b      	bne.n	800134c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001334:	4b8d      	ldr	r3, [pc, #564]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d05b      	beq.n	80013f8 <HAL_RCC_OscConfig+0x108>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d157      	bne.n	80013f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e2d9      	b.n	8001900 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001354:	d106      	bne.n	8001364 <HAL_RCC_OscConfig+0x74>
 8001356:	4b85      	ldr	r3, [pc, #532]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4a84      	ldr	r2, [pc, #528]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 800135c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001360:	6013      	str	r3, [r2, #0]
 8001362:	e01d      	b.n	80013a0 <HAL_RCC_OscConfig+0xb0>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800136c:	d10c      	bne.n	8001388 <HAL_RCC_OscConfig+0x98>
 800136e:	4b7f      	ldr	r3, [pc, #508]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a7e      	ldr	r2, [pc, #504]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 8001374:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	4b7c      	ldr	r3, [pc, #496]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a7b      	ldr	r2, [pc, #492]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 8001380:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001384:	6013      	str	r3, [r2, #0]
 8001386:	e00b      	b.n	80013a0 <HAL_RCC_OscConfig+0xb0>
 8001388:	4b78      	ldr	r3, [pc, #480]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a77      	ldr	r2, [pc, #476]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 800138e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001392:	6013      	str	r3, [r2, #0]
 8001394:	4b75      	ldr	r3, [pc, #468]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a74      	ldr	r2, [pc, #464]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 800139a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800139e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d013      	beq.n	80013d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013a8:	f7ff fb32 	bl	8000a10 <HAL_GetTick>
 80013ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013ae:	e008      	b.n	80013c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013b0:	f7ff fb2e 	bl	8000a10 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	2b64      	cmp	r3, #100	; 0x64
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e29e      	b.n	8001900 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013c2:	4b6a      	ldr	r3, [pc, #424]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0f0      	beq.n	80013b0 <HAL_RCC_OscConfig+0xc0>
 80013ce:	e014      	b.n	80013fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d0:	f7ff fb1e 	bl	8000a10 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013d8:	f7ff fb1a 	bl	8000a10 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b64      	cmp	r3, #100	; 0x64
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e28a      	b.n	8001900 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013ea:	4b60      	ldr	r3, [pc, #384]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f0      	bne.n	80013d8 <HAL_RCC_OscConfig+0xe8>
 80013f6:	e000      	b.n	80013fa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	2b00      	cmp	r3, #0
 8001404:	d075      	beq.n	80014f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001406:	4b59      	ldr	r3, [pc, #356]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f003 030c 	and.w	r3, r3, #12
 800140e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001410:	4b56      	ldr	r3, [pc, #344]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	f003 0303 	and.w	r3, r3, #3
 8001418:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	2b0c      	cmp	r3, #12
 800141e:	d102      	bne.n	8001426 <HAL_RCC_OscConfig+0x136>
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	2b02      	cmp	r3, #2
 8001424:	d002      	beq.n	800142c <HAL_RCC_OscConfig+0x13c>
 8001426:	69bb      	ldr	r3, [r7, #24]
 8001428:	2b04      	cmp	r3, #4
 800142a:	d11f      	bne.n	800146c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800142c:	4b4f      	ldr	r3, [pc, #316]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001434:	2b00      	cmp	r3, #0
 8001436:	d005      	beq.n	8001444 <HAL_RCC_OscConfig+0x154>
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	68db      	ldr	r3, [r3, #12]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d101      	bne.n	8001444 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e25d      	b.n	8001900 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001444:	4b49      	ldr	r3, [pc, #292]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	691b      	ldr	r3, [r3, #16]
 8001450:	061b      	lsls	r3, r3, #24
 8001452:	4946      	ldr	r1, [pc, #280]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 8001454:	4313      	orrs	r3, r2
 8001456:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001458:	4b45      	ldr	r3, [pc, #276]	; (8001570 <HAL_RCC_OscConfig+0x280>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fa8b 	bl	8000978 <HAL_InitTick>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d043      	beq.n	80014f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
 800146a:	e249      	b.n	8001900 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d023      	beq.n	80014bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001474:	4b3d      	ldr	r3, [pc, #244]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a3c      	ldr	r2, [pc, #240]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 800147a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001480:	f7ff fac6 	bl	8000a10 <HAL_GetTick>
 8001484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001486:	e008      	b.n	800149a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001488:	f7ff fac2 	bl	8000a10 <HAL_GetTick>
 800148c:	4602      	mov	r2, r0
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	1ad3      	subs	r3, r2, r3
 8001492:	2b02      	cmp	r3, #2
 8001494:	d901      	bls.n	800149a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e232      	b.n	8001900 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800149a:	4b34      	ldr	r3, [pc, #208]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f0      	beq.n	8001488 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014a6:	4b31      	ldr	r3, [pc, #196]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	691b      	ldr	r3, [r3, #16]
 80014b2:	061b      	lsls	r3, r3, #24
 80014b4:	492d      	ldr	r1, [pc, #180]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 80014b6:	4313      	orrs	r3, r2
 80014b8:	604b      	str	r3, [r1, #4]
 80014ba:	e01a      	b.n	80014f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014bc:	4b2b      	ldr	r3, [pc, #172]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a2a      	ldr	r2, [pc, #168]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 80014c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c8:	f7ff faa2 	bl	8000a10 <HAL_GetTick>
 80014cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014ce:	e008      	b.n	80014e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d0:	f7ff fa9e 	bl	8000a10 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e20e      	b.n	8001900 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014e2:	4b22      	ldr	r3, [pc, #136]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1f0      	bne.n	80014d0 <HAL_RCC_OscConfig+0x1e0>
 80014ee:	e000      	b.n	80014f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d041      	beq.n	8001582 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	695b      	ldr	r3, [r3, #20]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d01c      	beq.n	8001540 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001506:	4b19      	ldr	r3, [pc, #100]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 8001508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800150c:	4a17      	ldr	r2, [pc, #92]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001516:	f7ff fa7b 	bl	8000a10 <HAL_GetTick>
 800151a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800151c:	e008      	b.n	8001530 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800151e:	f7ff fa77 	bl	8000a10 <HAL_GetTick>
 8001522:	4602      	mov	r2, r0
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b02      	cmp	r3, #2
 800152a:	d901      	bls.n	8001530 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	e1e7      	b.n	8001900 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001530:	4b0e      	ldr	r3, [pc, #56]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 8001532:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0ef      	beq.n	800151e <HAL_RCC_OscConfig+0x22e>
 800153e:	e020      	b.n	8001582 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001540:	4b0a      	ldr	r3, [pc, #40]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 8001542:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001546:	4a09      	ldr	r2, [pc, #36]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 8001548:	f023 0301 	bic.w	r3, r3, #1
 800154c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001550:	f7ff fa5e 	bl	8000a10 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001556:	e00d      	b.n	8001574 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001558:	f7ff fa5a 	bl	8000a10 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d906      	bls.n	8001574 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e1ca      	b.n	8001900 <HAL_RCC_OscConfig+0x610>
 800156a:	bf00      	nop
 800156c:	40021000 	.word	0x40021000
 8001570:	2000000c 	.word	0x2000000c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001574:	4b8c      	ldr	r3, [pc, #560]	; (80017a8 <HAL_RCC_OscConfig+0x4b8>)
 8001576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1ea      	bne.n	8001558 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0304 	and.w	r3, r3, #4
 800158a:	2b00      	cmp	r3, #0
 800158c:	f000 80a6 	beq.w	80016dc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001590:	2300      	movs	r3, #0
 8001592:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001594:	4b84      	ldr	r3, [pc, #528]	; (80017a8 <HAL_RCC_OscConfig+0x4b8>)
 8001596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d101      	bne.n	80015a4 <HAL_RCC_OscConfig+0x2b4>
 80015a0:	2301      	movs	r3, #1
 80015a2:	e000      	b.n	80015a6 <HAL_RCC_OscConfig+0x2b6>
 80015a4:	2300      	movs	r3, #0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d00d      	beq.n	80015c6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015aa:	4b7f      	ldr	r3, [pc, #508]	; (80017a8 <HAL_RCC_OscConfig+0x4b8>)
 80015ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ae:	4a7e      	ldr	r2, [pc, #504]	; (80017a8 <HAL_RCC_OscConfig+0x4b8>)
 80015b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b4:	6593      	str	r3, [r2, #88]	; 0x58
 80015b6:	4b7c      	ldr	r3, [pc, #496]	; (80017a8 <HAL_RCC_OscConfig+0x4b8>)
 80015b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80015c2:	2301      	movs	r3, #1
 80015c4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015c6:	4b79      	ldr	r3, [pc, #484]	; (80017ac <HAL_RCC_OscConfig+0x4bc>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d118      	bne.n	8001604 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015d2:	4b76      	ldr	r3, [pc, #472]	; (80017ac <HAL_RCC_OscConfig+0x4bc>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a75      	ldr	r2, [pc, #468]	; (80017ac <HAL_RCC_OscConfig+0x4bc>)
 80015d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015de:	f7ff fa17 	bl	8000a10 <HAL_GetTick>
 80015e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015e4:	e008      	b.n	80015f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015e6:	f7ff fa13 	bl	8000a10 <HAL_GetTick>
 80015ea:	4602      	mov	r2, r0
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d901      	bls.n	80015f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80015f4:	2303      	movs	r3, #3
 80015f6:	e183      	b.n	8001900 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015f8:	4b6c      	ldr	r3, [pc, #432]	; (80017ac <HAL_RCC_OscConfig+0x4bc>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001600:	2b00      	cmp	r3, #0
 8001602:	d0f0      	beq.n	80015e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2b01      	cmp	r3, #1
 800160a:	d108      	bne.n	800161e <HAL_RCC_OscConfig+0x32e>
 800160c:	4b66      	ldr	r3, [pc, #408]	; (80017a8 <HAL_RCC_OscConfig+0x4b8>)
 800160e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001612:	4a65      	ldr	r2, [pc, #404]	; (80017a8 <HAL_RCC_OscConfig+0x4b8>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800161c:	e024      	b.n	8001668 <HAL_RCC_OscConfig+0x378>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	2b05      	cmp	r3, #5
 8001624:	d110      	bne.n	8001648 <HAL_RCC_OscConfig+0x358>
 8001626:	4b60      	ldr	r3, [pc, #384]	; (80017a8 <HAL_RCC_OscConfig+0x4b8>)
 8001628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800162c:	4a5e      	ldr	r2, [pc, #376]	; (80017a8 <HAL_RCC_OscConfig+0x4b8>)
 800162e:	f043 0304 	orr.w	r3, r3, #4
 8001632:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001636:	4b5c      	ldr	r3, [pc, #368]	; (80017a8 <HAL_RCC_OscConfig+0x4b8>)
 8001638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800163c:	4a5a      	ldr	r2, [pc, #360]	; (80017a8 <HAL_RCC_OscConfig+0x4b8>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001646:	e00f      	b.n	8001668 <HAL_RCC_OscConfig+0x378>
 8001648:	4b57      	ldr	r3, [pc, #348]	; (80017a8 <HAL_RCC_OscConfig+0x4b8>)
 800164a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800164e:	4a56      	ldr	r2, [pc, #344]	; (80017a8 <HAL_RCC_OscConfig+0x4b8>)
 8001650:	f023 0301 	bic.w	r3, r3, #1
 8001654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001658:	4b53      	ldr	r3, [pc, #332]	; (80017a8 <HAL_RCC_OscConfig+0x4b8>)
 800165a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800165e:	4a52      	ldr	r2, [pc, #328]	; (80017a8 <HAL_RCC_OscConfig+0x4b8>)
 8001660:	f023 0304 	bic.w	r3, r3, #4
 8001664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d016      	beq.n	800169e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001670:	f7ff f9ce 	bl	8000a10 <HAL_GetTick>
 8001674:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001676:	e00a      	b.n	800168e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001678:	f7ff f9ca 	bl	8000a10 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	f241 3288 	movw	r2, #5000	; 0x1388
 8001686:	4293      	cmp	r3, r2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e138      	b.n	8001900 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800168e:	4b46      	ldr	r3, [pc, #280]	; (80017a8 <HAL_RCC_OscConfig+0x4b8>)
 8001690:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0ed      	beq.n	8001678 <HAL_RCC_OscConfig+0x388>
 800169c:	e015      	b.n	80016ca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800169e:	f7ff f9b7 	bl	8000a10 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016a4:	e00a      	b.n	80016bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a6:	f7ff f9b3 	bl	8000a10 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e121      	b.n	8001900 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016bc:	4b3a      	ldr	r3, [pc, #232]	; (80017a8 <HAL_RCC_OscConfig+0x4b8>)
 80016be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c2:	f003 0302 	and.w	r3, r3, #2
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1ed      	bne.n	80016a6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016ca:	7ffb      	ldrb	r3, [r7, #31]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d105      	bne.n	80016dc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016d0:	4b35      	ldr	r3, [pc, #212]	; (80017a8 <HAL_RCC_OscConfig+0x4b8>)
 80016d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016d4:	4a34      	ldr	r2, [pc, #208]	; (80017a8 <HAL_RCC_OscConfig+0x4b8>)
 80016d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0320 	and.w	r3, r3, #32
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d03c      	beq.n	8001762 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d01c      	beq.n	800172a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80016f0:	4b2d      	ldr	r3, [pc, #180]	; (80017a8 <HAL_RCC_OscConfig+0x4b8>)
 80016f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80016f6:	4a2c      	ldr	r2, [pc, #176]	; (80017a8 <HAL_RCC_OscConfig+0x4b8>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001700:	f7ff f986 	bl	8000a10 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001706:	e008      	b.n	800171a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001708:	f7ff f982 	bl	8000a10 <HAL_GetTick>
 800170c:	4602      	mov	r2, r0
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	2b02      	cmp	r3, #2
 8001714:	d901      	bls.n	800171a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001716:	2303      	movs	r3, #3
 8001718:	e0f2      	b.n	8001900 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800171a:	4b23      	ldr	r3, [pc, #140]	; (80017a8 <HAL_RCC_OscConfig+0x4b8>)
 800171c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001720:	f003 0302 	and.w	r3, r3, #2
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0ef      	beq.n	8001708 <HAL_RCC_OscConfig+0x418>
 8001728:	e01b      	b.n	8001762 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800172a:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <HAL_RCC_OscConfig+0x4b8>)
 800172c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001730:	4a1d      	ldr	r2, [pc, #116]	; (80017a8 <HAL_RCC_OscConfig+0x4b8>)
 8001732:	f023 0301 	bic.w	r3, r3, #1
 8001736:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800173a:	f7ff f969 	bl	8000a10 <HAL_GetTick>
 800173e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001740:	e008      	b.n	8001754 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001742:	f7ff f965 	bl	8000a10 <HAL_GetTick>
 8001746:	4602      	mov	r2, r0
 8001748:	693b      	ldr	r3, [r7, #16]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d901      	bls.n	8001754 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001750:	2303      	movs	r3, #3
 8001752:	e0d5      	b.n	8001900 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001754:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <HAL_RCC_OscConfig+0x4b8>)
 8001756:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1ef      	bne.n	8001742 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	69db      	ldr	r3, [r3, #28]
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 80c9 	beq.w	80018fe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800176c:	4b0e      	ldr	r3, [pc, #56]	; (80017a8 <HAL_RCC_OscConfig+0x4b8>)
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	f003 030c 	and.w	r3, r3, #12
 8001774:	2b0c      	cmp	r3, #12
 8001776:	f000 8083 	beq.w	8001880 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d15e      	bne.n	8001840 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001782:	4b09      	ldr	r3, [pc, #36]	; (80017a8 <HAL_RCC_OscConfig+0x4b8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a08      	ldr	r2, [pc, #32]	; (80017a8 <HAL_RCC_OscConfig+0x4b8>)
 8001788:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800178c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800178e:	f7ff f93f 	bl	8000a10 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001794:	e00c      	b.n	80017b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001796:	f7ff f93b 	bl	8000a10 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d905      	bls.n	80017b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e0ab      	b.n	8001900 <HAL_RCC_OscConfig+0x610>
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017b0:	4b55      	ldr	r3, [pc, #340]	; (8001908 <HAL_RCC_OscConfig+0x618>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1ec      	bne.n	8001796 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017bc:	4b52      	ldr	r3, [pc, #328]	; (8001908 <HAL_RCC_OscConfig+0x618>)
 80017be:	68da      	ldr	r2, [r3, #12]
 80017c0:	4b52      	ldr	r3, [pc, #328]	; (800190c <HAL_RCC_OscConfig+0x61c>)
 80017c2:	4013      	ands	r3, r2
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	6a11      	ldr	r1, [r2, #32]
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80017cc:	3a01      	subs	r2, #1
 80017ce:	0112      	lsls	r2, r2, #4
 80017d0:	4311      	orrs	r1, r2
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80017d6:	0212      	lsls	r2, r2, #8
 80017d8:	4311      	orrs	r1, r2
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80017de:	0852      	lsrs	r2, r2, #1
 80017e0:	3a01      	subs	r2, #1
 80017e2:	0552      	lsls	r2, r2, #21
 80017e4:	4311      	orrs	r1, r2
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017ea:	0852      	lsrs	r2, r2, #1
 80017ec:	3a01      	subs	r2, #1
 80017ee:	0652      	lsls	r2, r2, #25
 80017f0:	4311      	orrs	r1, r2
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80017f6:	06d2      	lsls	r2, r2, #27
 80017f8:	430a      	orrs	r2, r1
 80017fa:	4943      	ldr	r1, [pc, #268]	; (8001908 <HAL_RCC_OscConfig+0x618>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001800:	4b41      	ldr	r3, [pc, #260]	; (8001908 <HAL_RCC_OscConfig+0x618>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a40      	ldr	r2, [pc, #256]	; (8001908 <HAL_RCC_OscConfig+0x618>)
 8001806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800180a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800180c:	4b3e      	ldr	r3, [pc, #248]	; (8001908 <HAL_RCC_OscConfig+0x618>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	4a3d      	ldr	r2, [pc, #244]	; (8001908 <HAL_RCC_OscConfig+0x618>)
 8001812:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001816:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001818:	f7ff f8fa 	bl	8000a10 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001820:	f7ff f8f6 	bl	8000a10 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b02      	cmp	r3, #2
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e066      	b.n	8001900 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001832:	4b35      	ldr	r3, [pc, #212]	; (8001908 <HAL_RCC_OscConfig+0x618>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0x530>
 800183e:	e05e      	b.n	80018fe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001840:	4b31      	ldr	r3, [pc, #196]	; (8001908 <HAL_RCC_OscConfig+0x618>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a30      	ldr	r2, [pc, #192]	; (8001908 <HAL_RCC_OscConfig+0x618>)
 8001846:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800184a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800184c:	f7ff f8e0 	bl	8000a10 <HAL_GetTick>
 8001850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001854:	f7ff f8dc 	bl	8000a10 <HAL_GetTick>
 8001858:	4602      	mov	r2, r0
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e04c      	b.n	8001900 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001866:	4b28      	ldr	r3, [pc, #160]	; (8001908 <HAL_RCC_OscConfig+0x618>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d1f0      	bne.n	8001854 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001872:	4b25      	ldr	r3, [pc, #148]	; (8001908 <HAL_RCC_OscConfig+0x618>)
 8001874:	68da      	ldr	r2, [r3, #12]
 8001876:	4924      	ldr	r1, [pc, #144]	; (8001908 <HAL_RCC_OscConfig+0x618>)
 8001878:	4b25      	ldr	r3, [pc, #148]	; (8001910 <HAL_RCC_OscConfig+0x620>)
 800187a:	4013      	ands	r3, r2
 800187c:	60cb      	str	r3, [r1, #12]
 800187e:	e03e      	b.n	80018fe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d101      	bne.n	800188c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e039      	b.n	8001900 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800188c:	4b1e      	ldr	r3, [pc, #120]	; (8001908 <HAL_RCC_OscConfig+0x618>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f003 0203 	and.w	r2, r3, #3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	429a      	cmp	r2, r3
 800189e:	d12c      	bne.n	80018fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018aa:	3b01      	subs	r3, #1
 80018ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d123      	bne.n	80018fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018be:	429a      	cmp	r2, r3
 80018c0:	d11b      	bne.n	80018fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d113      	bne.n	80018fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018dc:	085b      	lsrs	r3, r3, #1
 80018de:	3b01      	subs	r3, #1
 80018e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d109      	bne.n	80018fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f0:	085b      	lsrs	r3, r3, #1
 80018f2:	3b01      	subs	r3, #1
 80018f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d001      	beq.n	80018fe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3720      	adds	r7, #32
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40021000 	.word	0x40021000
 800190c:	019f800c 	.word	0x019f800c
 8001910:	feeefffc 	.word	0xfeeefffc

08001914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800191e:	2300      	movs	r3, #0
 8001920:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d101      	bne.n	800192c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e11e      	b.n	8001b6a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800192c:	4b91      	ldr	r3, [pc, #580]	; (8001b74 <HAL_RCC_ClockConfig+0x260>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 030f 	and.w	r3, r3, #15
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d910      	bls.n	800195c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800193a:	4b8e      	ldr	r3, [pc, #568]	; (8001b74 <HAL_RCC_ClockConfig+0x260>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f023 020f 	bic.w	r2, r3, #15
 8001942:	498c      	ldr	r1, [pc, #560]	; (8001b74 <HAL_RCC_ClockConfig+0x260>)
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	4313      	orrs	r3, r2
 8001948:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800194a:	4b8a      	ldr	r3, [pc, #552]	; (8001b74 <HAL_RCC_ClockConfig+0x260>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 030f 	and.w	r3, r3, #15
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d001      	beq.n	800195c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e106      	b.n	8001b6a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0301 	and.w	r3, r3, #1
 8001964:	2b00      	cmp	r3, #0
 8001966:	d073      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b03      	cmp	r3, #3
 800196e:	d129      	bne.n	80019c4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001970:	4b81      	ldr	r3, [pc, #516]	; (8001b78 <HAL_RCC_ClockConfig+0x264>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d101      	bne.n	8001980 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e0f4      	b.n	8001b6a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001980:	f000 f99e 	bl	8001cc0 <RCC_GetSysClockFreqFromPLLSource>
 8001984:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	4a7c      	ldr	r2, [pc, #496]	; (8001b7c <HAL_RCC_ClockConfig+0x268>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d93f      	bls.n	8001a0e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800198e:	4b7a      	ldr	r3, [pc, #488]	; (8001b78 <HAL_RCC_ClockConfig+0x264>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d009      	beq.n	80019ae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d033      	beq.n	8001a0e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d12f      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019ae:	4b72      	ldr	r3, [pc, #456]	; (8001b78 <HAL_RCC_ClockConfig+0x264>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019b6:	4a70      	ldr	r2, [pc, #448]	; (8001b78 <HAL_RCC_ClockConfig+0x264>)
 80019b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80019be:	2380      	movs	r3, #128	; 0x80
 80019c0:	617b      	str	r3, [r7, #20]
 80019c2:	e024      	b.n	8001a0e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d107      	bne.n	80019dc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019cc:	4b6a      	ldr	r3, [pc, #424]	; (8001b78 <HAL_RCC_ClockConfig+0x264>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d109      	bne.n	80019ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0c6      	b.n	8001b6a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019dc:	4b66      	ldr	r3, [pc, #408]	; (8001b78 <HAL_RCC_ClockConfig+0x264>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e0be      	b.n	8001b6a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80019ec:	f000 f8ce 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 80019f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	4a61      	ldr	r2, [pc, #388]	; (8001b7c <HAL_RCC_ClockConfig+0x268>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d909      	bls.n	8001a0e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80019fa:	4b5f      	ldr	r3, [pc, #380]	; (8001b78 <HAL_RCC_ClockConfig+0x264>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a02:	4a5d      	ldr	r2, [pc, #372]	; (8001b78 <HAL_RCC_ClockConfig+0x264>)
 8001a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a08:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001a0a:	2380      	movs	r3, #128	; 0x80
 8001a0c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a0e:	4b5a      	ldr	r3, [pc, #360]	; (8001b78 <HAL_RCC_ClockConfig+0x264>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f023 0203 	bic.w	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	4957      	ldr	r1, [pc, #348]	; (8001b78 <HAL_RCC_ClockConfig+0x264>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a20:	f7fe fff6 	bl	8000a10 <HAL_GetTick>
 8001a24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a26:	e00a      	b.n	8001a3e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a28:	f7fe fff2 	bl	8000a10 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e095      	b.n	8001b6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3e:	4b4e      	ldr	r3, [pc, #312]	; (8001b78 <HAL_RCC_ClockConfig+0x264>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 020c 	and.w	r2, r3, #12
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d1eb      	bne.n	8001a28 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0302 	and.w	r3, r3, #2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d023      	beq.n	8001aa4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d005      	beq.n	8001a74 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a68:	4b43      	ldr	r3, [pc, #268]	; (8001b78 <HAL_RCC_ClockConfig+0x264>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	4a42      	ldr	r2, [pc, #264]	; (8001b78 <HAL_RCC_ClockConfig+0x264>)
 8001a6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a72:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f003 0308 	and.w	r3, r3, #8
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d007      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001a80:	4b3d      	ldr	r3, [pc, #244]	; (8001b78 <HAL_RCC_ClockConfig+0x264>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001a88:	4a3b      	ldr	r2, [pc, #236]	; (8001b78 <HAL_RCC_ClockConfig+0x264>)
 8001a8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001a8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a90:	4b39      	ldr	r3, [pc, #228]	; (8001b78 <HAL_RCC_ClockConfig+0x264>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	4936      	ldr	r1, [pc, #216]	; (8001b78 <HAL_RCC_ClockConfig+0x264>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	608b      	str	r3, [r1, #8]
 8001aa2:	e008      	b.n	8001ab6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	2b80      	cmp	r3, #128	; 0x80
 8001aa8:	d105      	bne.n	8001ab6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001aaa:	4b33      	ldr	r3, [pc, #204]	; (8001b78 <HAL_RCC_ClockConfig+0x264>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	4a32      	ldr	r2, [pc, #200]	; (8001b78 <HAL_RCC_ClockConfig+0x264>)
 8001ab0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ab4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ab6:	4b2f      	ldr	r3, [pc, #188]	; (8001b74 <HAL_RCC_ClockConfig+0x260>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	683a      	ldr	r2, [r7, #0]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d21d      	bcs.n	8001b00 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac4:	4b2b      	ldr	r3, [pc, #172]	; (8001b74 <HAL_RCC_ClockConfig+0x260>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f023 020f 	bic.w	r2, r3, #15
 8001acc:	4929      	ldr	r1, [pc, #164]	; (8001b74 <HAL_RCC_ClockConfig+0x260>)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ad4:	f7fe ff9c 	bl	8000a10 <HAL_GetTick>
 8001ad8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ada:	e00a      	b.n	8001af2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001adc:	f7fe ff98 	bl	8000a10 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e03b      	b.n	8001b6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	4b20      	ldr	r3, [pc, #128]	; (8001b74 <HAL_RCC_ClockConfig+0x260>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 030f 	and.w	r3, r3, #15
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d1ed      	bne.n	8001adc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0304 	and.w	r3, r3, #4
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d008      	beq.n	8001b1e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b0c:	4b1a      	ldr	r3, [pc, #104]	; (8001b78 <HAL_RCC_ClockConfig+0x264>)
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	4917      	ldr	r1, [pc, #92]	; (8001b78 <HAL_RCC_ClockConfig+0x264>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0308 	and.w	r3, r3, #8
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d009      	beq.n	8001b3e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b2a:	4b13      	ldr	r3, [pc, #76]	; (8001b78 <HAL_RCC_ClockConfig+0x264>)
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	490f      	ldr	r1, [pc, #60]	; (8001b78 <HAL_RCC_ClockConfig+0x264>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b3e:	f000 f825 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 8001b42:	4602      	mov	r2, r0
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <HAL_RCC_ClockConfig+0x264>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	091b      	lsrs	r3, r3, #4
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	490c      	ldr	r1, [pc, #48]	; (8001b80 <HAL_RCC_ClockConfig+0x26c>)
 8001b50:	5ccb      	ldrb	r3, [r1, r3]
 8001b52:	f003 031f 	and.w	r3, r3, #31
 8001b56:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <HAL_RCC_ClockConfig+0x270>)
 8001b5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001b5e:	4b0a      	ldr	r3, [pc, #40]	; (8001b88 <HAL_RCC_ClockConfig+0x274>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7fe ff08 	bl	8000978 <HAL_InitTick>
 8001b68:	4603      	mov	r3, r0
}
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3718      	adds	r7, #24
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40022000 	.word	0x40022000
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	04c4b400 	.word	0x04c4b400
 8001b80:	08003798 	.word	0x08003798
 8001b84:	20000008 	.word	0x20000008
 8001b88:	2000000c 	.word	0x2000000c

08001b8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b92:	4b2c      	ldr	r3, [pc, #176]	; (8001c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 030c 	and.w	r3, r3, #12
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	d102      	bne.n	8001ba4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b9e:	4b2a      	ldr	r3, [pc, #168]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	e047      	b.n	8001c34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ba4:	4b27      	ldr	r3, [pc, #156]	; (8001c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f003 030c 	and.w	r3, r3, #12
 8001bac:	2b08      	cmp	r3, #8
 8001bae:	d102      	bne.n	8001bb6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bb0:	4b26      	ldr	r3, [pc, #152]	; (8001c4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	e03e      	b.n	8001c34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001bb6:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	2b0c      	cmp	r3, #12
 8001bc0:	d136      	bne.n	8001c30 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bc2:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bcc:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	f003 030f 	and.w	r3, r3, #15
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2b03      	cmp	r3, #3
 8001bde:	d10c      	bne.n	8001bfa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001be0:	4a1a      	ldr	r2, [pc, #104]	; (8001c4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001be8:	4a16      	ldr	r2, [pc, #88]	; (8001c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001bea:	68d2      	ldr	r2, [r2, #12]
 8001bec:	0a12      	lsrs	r2, r2, #8
 8001bee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001bf2:	fb02 f303 	mul.w	r3, r2, r3
 8001bf6:	617b      	str	r3, [r7, #20]
      break;
 8001bf8:	e00c      	b.n	8001c14 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001bfa:	4a13      	ldr	r2, [pc, #76]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c02:	4a10      	ldr	r2, [pc, #64]	; (8001c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c04:	68d2      	ldr	r2, [r2, #12]
 8001c06:	0a12      	lsrs	r2, r2, #8
 8001c08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c0c:	fb02 f303 	mul.w	r3, r2, r3
 8001c10:	617b      	str	r3, [r7, #20]
      break;
 8001c12:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c14:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	0e5b      	lsrs	r3, r3, #25
 8001c1a:	f003 0303 	and.w	r3, r3, #3
 8001c1e:	3301      	adds	r3, #1
 8001c20:	005b      	lsls	r3, r3, #1
 8001c22:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	e001      	b.n	8001c34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001c34:	693b      	ldr	r3, [r7, #16]
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	371c      	adds	r7, #28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	40021000 	.word	0x40021000
 8001c48:	00f42400 	.word	0x00f42400
 8001c4c:	016e3600 	.word	0x016e3600

08001c50 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c56:	681b      	ldr	r3, [r3, #0]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	20000008 	.word	0x20000008

08001c68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c6c:	f7ff fff0 	bl	8001c50 <HAL_RCC_GetHCLKFreq>
 8001c70:	4602      	mov	r2, r0
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	0a1b      	lsrs	r3, r3, #8
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	4904      	ldr	r1, [pc, #16]	; (8001c90 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c7e:	5ccb      	ldrb	r3, [r1, r3]
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	080037a8 	.word	0x080037a8

08001c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c98:	f7ff ffda 	bl	8001c50 <HAL_RCC_GetHCLKFreq>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	0adb      	lsrs	r3, r3, #11
 8001ca4:	f003 0307 	and.w	r3, r3, #7
 8001ca8:	4904      	ldr	r1, [pc, #16]	; (8001cbc <HAL_RCC_GetPCLK2Freq+0x28>)
 8001caa:	5ccb      	ldrb	r3, [r1, r3]
 8001cac:	f003 031f 	and.w	r3, r3, #31
 8001cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40021000 	.word	0x40021000
 8001cbc:	080037a8 	.word	0x080037a8

08001cc0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b087      	sub	sp, #28
 8001cc4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cc6:	4b1e      	ldr	r3, [pc, #120]	; (8001d40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	f003 0303 	and.w	r3, r3, #3
 8001cce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cd0:	4b1b      	ldr	r3, [pc, #108]	; (8001d40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	091b      	lsrs	r3, r3, #4
 8001cd6:	f003 030f 	and.w	r3, r3, #15
 8001cda:	3301      	adds	r3, #1
 8001cdc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d10c      	bne.n	8001cfe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001ce4:	4a17      	ldr	r2, [pc, #92]	; (8001d44 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cec:	4a14      	ldr	r2, [pc, #80]	; (8001d40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001cee:	68d2      	ldr	r2, [r2, #12]
 8001cf0:	0a12      	lsrs	r2, r2, #8
 8001cf2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001cf6:	fb02 f303 	mul.w	r3, r2, r3
 8001cfa:	617b      	str	r3, [r7, #20]
    break;
 8001cfc:	e00c      	b.n	8001d18 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001cfe:	4a12      	ldr	r2, [pc, #72]	; (8001d48 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d06:	4a0e      	ldr	r2, [pc, #56]	; (8001d40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d08:	68d2      	ldr	r2, [r2, #12]
 8001d0a:	0a12      	lsrs	r2, r2, #8
 8001d0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d10:	fb02 f303 	mul.w	r3, r2, r3
 8001d14:	617b      	str	r3, [r7, #20]
    break;
 8001d16:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d18:	4b09      	ldr	r3, [pc, #36]	; (8001d40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	0e5b      	lsrs	r3, r3, #25
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	3301      	adds	r3, #1
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d30:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001d32:	687b      	ldr	r3, [r7, #4]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	371c      	adds	r7, #28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	40021000 	.word	0x40021000
 8001d44:	016e3600 	.word	0x016e3600
 8001d48:	00f42400 	.word	0x00f42400

08001d4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001d54:	2300      	movs	r3, #0
 8001d56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001d58:	2300      	movs	r3, #0
 8001d5a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 8098 	beq.w	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d6e:	4b43      	ldr	r3, [pc, #268]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10d      	bne.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d7a:	4b40      	ldr	r3, [pc, #256]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	4a3f      	ldr	r2, [pc, #252]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d84:	6593      	str	r3, [r2, #88]	; 0x58
 8001d86:	4b3d      	ldr	r3, [pc, #244]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d92:	2301      	movs	r3, #1
 8001d94:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d96:	4b3a      	ldr	r3, [pc, #232]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a39      	ldr	r2, [pc, #228]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001da0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001da2:	f7fe fe35 	bl	8000a10 <HAL_GetTick>
 8001da6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001da8:	e009      	b.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001daa:	f7fe fe31 	bl	8000a10 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d902      	bls.n	8001dbe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	74fb      	strb	r3, [r7, #19]
        break;
 8001dbc:	e005      	b.n	8001dca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001dbe:	4b30      	ldr	r3, [pc, #192]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0ef      	beq.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001dca:	7cfb      	ldrb	r3, [r7, #19]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d159      	bne.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001dd0:	4b2a      	ldr	r3, [pc, #168]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dda:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d01e      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de6:	697a      	ldr	r2, [r7, #20]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d019      	beq.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001dec:	4b23      	ldr	r3, [pc, #140]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001df6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001df8:	4b20      	ldr	r3, [pc, #128]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfe:	4a1f      	ldr	r2, [pc, #124]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e08:	4b1c      	ldr	r3, [pc, #112]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e0e:	4a1b      	ldr	r2, [pc, #108]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e18:	4a18      	ldr	r2, [pc, #96]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d016      	beq.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2a:	f7fe fdf1 	bl	8000a10 <HAL_GetTick>
 8001e2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e30:	e00b      	b.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e32:	f7fe fded 	bl	8000a10 <HAL_GetTick>
 8001e36:	4602      	mov	r2, r0
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d902      	bls.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	74fb      	strb	r3, [r7, #19]
            break;
 8001e48:	e006      	b.n	8001e58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0ec      	beq.n	8001e32 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001e58:	7cfb      	ldrb	r3, [r7, #19]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10b      	bne.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e5e:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e6c:	4903      	ldr	r1, [pc, #12]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001e74:	e008      	b.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e76:	7cfb      	ldrb	r3, [r7, #19]
 8001e78:	74bb      	strb	r3, [r7, #18]
 8001e7a:	e005      	b.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e84:	7cfb      	ldrb	r3, [r7, #19]
 8001e86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e88:	7c7b      	ldrb	r3, [r7, #17]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d105      	bne.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e8e:	4ba7      	ldr	r3, [pc, #668]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e92:	4aa6      	ldr	r2, [pc, #664]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d00a      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ea6:	4ba1      	ldr	r3, [pc, #644]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eac:	f023 0203 	bic.w	r2, r3, #3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	499d      	ldr	r1, [pc, #628]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00a      	beq.n	8001ede <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ec8:	4b98      	ldr	r3, [pc, #608]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ece:	f023 020c 	bic.w	r2, r3, #12
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	4995      	ldr	r1, [pc, #596]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0304 	and.w	r3, r3, #4
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00a      	beq.n	8001f00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001eea:	4b90      	ldr	r3, [pc, #576]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	498c      	ldr	r1, [pc, #560]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0308 	and.w	r3, r3, #8
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00a      	beq.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f0c:	4b87      	ldr	r3, [pc, #540]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f12:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	4984      	ldr	r1, [pc, #528]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0310 	and.w	r3, r3, #16
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00a      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f2e:	4b7f      	ldr	r3, [pc, #508]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	695b      	ldr	r3, [r3, #20]
 8001f3c:	497b      	ldr	r1, [pc, #492]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0320 	and.w	r3, r3, #32
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00a      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f50:	4b76      	ldr	r3, [pc, #472]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f56:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	4973      	ldr	r1, [pc, #460]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00a      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f72:	4b6e      	ldr	r3, [pc, #440]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f78:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	496a      	ldr	r1, [pc, #424]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00a      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001f94:	4b65      	ldr	r3, [pc, #404]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	4962      	ldr	r1, [pc, #392]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00a      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001fb6:	4b5d      	ldr	r3, [pc, #372]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	4959      	ldr	r1, [pc, #356]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00a      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001fd8:	4b54      	ldr	r3, [pc, #336]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001fde:	f023 0203 	bic.w	r2, r3, #3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe6:	4951      	ldr	r1, [pc, #324]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00a      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ffa:	4b4c      	ldr	r3, [pc, #304]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002000:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002008:	4948      	ldr	r1, [pc, #288]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800200a:	4313      	orrs	r3, r2
 800200c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002018:	2b00      	cmp	r3, #0
 800201a:	d015      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800201c:	4b43      	ldr	r3, [pc, #268]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800201e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002022:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	4940      	ldr	r1, [pc, #256]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800202c:	4313      	orrs	r3, r2
 800202e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800203a:	d105      	bne.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800203c:	4b3b      	ldr	r3, [pc, #236]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	4a3a      	ldr	r2, [pc, #232]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002042:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002046:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002050:	2b00      	cmp	r3, #0
 8002052:	d015      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002054:	4b35      	ldr	r3, [pc, #212]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800205a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002062:	4932      	ldr	r1, [pc, #200]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002064:	4313      	orrs	r3, r2
 8002066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800206e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002072:	d105      	bne.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002074:	4b2d      	ldr	r3, [pc, #180]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	4a2c      	ldr	r2, [pc, #176]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800207a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800207e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d015      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800208c:	4b27      	ldr	r3, [pc, #156]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800208e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002092:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209a:	4924      	ldr	r1, [pc, #144]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800209c:	4313      	orrs	r3, r2
 800209e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020aa:	d105      	bne.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020ac:	4b1f      	ldr	r3, [pc, #124]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	4a1e      	ldr	r2, [pc, #120]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020b6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d015      	beq.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020c4:	4b19      	ldr	r3, [pc, #100]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d2:	4916      	ldr	r1, [pc, #88]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020e2:	d105      	bne.n	80020f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020e4:	4b11      	ldr	r3, [pc, #68]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	4a10      	ldr	r2, [pc, #64]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d019      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80020fc:	4b0b      	ldr	r3, [pc, #44]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002102:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	4908      	ldr	r1, [pc, #32]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800210c:	4313      	orrs	r3, r2
 800210e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800211a:	d109      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800211c:	4b03      	ldr	r3, [pc, #12]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	4a02      	ldr	r2, [pc, #8]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002122:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002126:	60d3      	str	r3, [r2, #12]
 8002128:	e002      	b.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800212a:	bf00      	nop
 800212c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d015      	beq.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800213c:	4b29      	ldr	r3, [pc, #164]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002142:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800214a:	4926      	ldr	r1, [pc, #152]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800214c:	4313      	orrs	r3, r2
 800214e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800215a:	d105      	bne.n	8002168 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800215c:	4b21      	ldr	r3, [pc, #132]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	4a20      	ldr	r2, [pc, #128]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002166:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002170:	2b00      	cmp	r3, #0
 8002172:	d015      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002174:	4b1b      	ldr	r3, [pc, #108]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002182:	4918      	ldr	r1, [pc, #96]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002184:	4313      	orrs	r3, r2
 8002186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800218e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002192:	d105      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002194:	4b13      	ldr	r3, [pc, #76]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	4a12      	ldr	r2, [pc, #72]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800219a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d015      	beq.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80021ac:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80021b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ba:	490a      	ldr	r1, [pc, #40]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80021ca:	d105      	bne.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021cc:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80021d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	40021000 	.word	0x40021000

080021e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b082      	sub	sp, #8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d101      	bne.n	80021fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e042      	b.n	8002280 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002200:	2b00      	cmp	r3, #0
 8002202:	d106      	bne.n	8002212 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7fe fac3 	bl	8000798 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2224      	movs	r2, #36	; 0x24
 8002216:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 0201 	bic.w	r2, r2, #1
 8002228:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222e:	2b00      	cmp	r3, #0
 8002230:	d002      	beq.n	8002238 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 fef6 	bl	8003024 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 fbf7 	bl	8002a2c <UART_SetConfig>
 800223e:	4603      	mov	r3, r0
 8002240:	2b01      	cmp	r3, #1
 8002242:	d101      	bne.n	8002248 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e01b      	b.n	8002280 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002256:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002266:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0201 	orr.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 ff75 	bl	8003168 <UART_CheckIdleState>
 800227e:	4603      	mov	r3, r0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08a      	sub	sp, #40	; 0x28
 800228c:	af02      	add	r7, sp, #8
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	603b      	str	r3, [r7, #0]
 8002294:	4613      	mov	r3, r2
 8002296:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800229e:	2b20      	cmp	r3, #32
 80022a0:	d17b      	bne.n	800239a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d002      	beq.n	80022ae <HAL_UART_Transmit+0x26>
 80022a8:	88fb      	ldrh	r3, [r7, #6]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e074      	b.n	800239c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2221      	movs	r2, #33	; 0x21
 80022be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022c2:	f7fe fba5 	bl	8000a10 <HAL_GetTick>
 80022c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	88fa      	ldrh	r2, [r7, #6]
 80022cc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	88fa      	ldrh	r2, [r7, #6]
 80022d4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022e0:	d108      	bne.n	80022f4 <HAL_UART_Transmit+0x6c>
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d104      	bne.n	80022f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80022ea:	2300      	movs	r3, #0
 80022ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	61bb      	str	r3, [r7, #24]
 80022f2:	e003      	b.n	80022fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022f8:	2300      	movs	r3, #0
 80022fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80022fc:	e030      	b.n	8002360 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	2200      	movs	r2, #0
 8002306:	2180      	movs	r1, #128	; 0x80
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f000 ffd7 	bl	80032bc <UART_WaitOnFlagUntilTimeout>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d005      	beq.n	8002320 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2220      	movs	r2, #32
 8002318:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800231c:	2303      	movs	r3, #3
 800231e:	e03d      	b.n	800239c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d10b      	bne.n	800233e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	881b      	ldrh	r3, [r3, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002334:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	3302      	adds	r3, #2
 800233a:	61bb      	str	r3, [r7, #24]
 800233c:	e007      	b.n	800234e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	781a      	ldrb	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	3301      	adds	r3, #1
 800234c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002354:	b29b      	uxth	r3, r3
 8002356:	3b01      	subs	r3, #1
 8002358:	b29a      	uxth	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002366:	b29b      	uxth	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d1c8      	bne.n	80022fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	2200      	movs	r2, #0
 8002374:	2140      	movs	r1, #64	; 0x40
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f000 ffa0 	bl	80032bc <UART_WaitOnFlagUntilTimeout>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d005      	beq.n	800238e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2220      	movs	r2, #32
 8002386:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e006      	b.n	800239c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2220      	movs	r2, #32
 8002392:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002396:	2300      	movs	r3, #0
 8002398:	e000      	b.n	800239c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800239a:	2302      	movs	r3, #2
  }
}
 800239c:	4618      	mov	r0, r3
 800239e:	3720      	adds	r7, #32
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b0ba      	sub	sp, #232	; 0xe8
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	69db      	ldr	r3, [r3, #28]
 80023b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80023ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80023ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80023d2:	4013      	ands	r3, r2
 80023d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80023d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d11b      	bne.n	8002418 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80023e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023e4:	f003 0320 	and.w	r3, r3, #32
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d015      	beq.n	8002418 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80023ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023f0:	f003 0320 	and.w	r3, r3, #32
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d105      	bne.n	8002404 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80023f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d009      	beq.n	8002418 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 82e3 	beq.w	80029d4 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	4798      	blx	r3
      }
      return;
 8002416:	e2dd      	b.n	80029d4 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002418:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 8123 	beq.w	8002668 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002422:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002426:	4b8d      	ldr	r3, [pc, #564]	; (800265c <HAL_UART_IRQHandler+0x2b8>)
 8002428:	4013      	ands	r3, r2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d106      	bne.n	800243c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800242e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002432:	4b8b      	ldr	r3, [pc, #556]	; (8002660 <HAL_UART_IRQHandler+0x2bc>)
 8002434:	4013      	ands	r3, r2
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 8116 	beq.w	8002668 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800243c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	2b00      	cmp	r3, #0
 8002446:	d011      	beq.n	800246c <HAL_UART_IRQHandler+0xc8>
 8002448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800244c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00b      	beq.n	800246c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2201      	movs	r2, #1
 800245a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002462:	f043 0201 	orr.w	r2, r3, #1
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800246c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d011      	beq.n	800249c <HAL_UART_IRQHandler+0xf8>
 8002478:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00b      	beq.n	800249c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2202      	movs	r2, #2
 800248a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002492:	f043 0204 	orr.w	r2, r3, #4
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800249c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d011      	beq.n	80024cc <HAL_UART_IRQHandler+0x128>
 80024a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d00b      	beq.n	80024cc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2204      	movs	r2, #4
 80024ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c2:	f043 0202 	orr.w	r2, r3, #2
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80024cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d017      	beq.n	8002508 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80024d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024dc:	f003 0320 	and.w	r3, r3, #32
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d105      	bne.n	80024f0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80024e4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80024e8:	4b5c      	ldr	r3, [pc, #368]	; (800265c <HAL_UART_IRQHandler+0x2b8>)
 80024ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00b      	beq.n	8002508 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2208      	movs	r2, #8
 80024f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024fe:	f043 0208 	orr.w	r2, r3, #8
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800250c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002510:	2b00      	cmp	r3, #0
 8002512:	d012      	beq.n	800253a <HAL_UART_IRQHandler+0x196>
 8002514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002518:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00c      	beq.n	800253a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002528:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002530:	f043 0220 	orr.w	r2, r3, #32
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 8249 	beq.w	80029d8 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800254a:	f003 0320 	and.w	r3, r3, #32
 800254e:	2b00      	cmp	r3, #0
 8002550:	d013      	beq.n	800257a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002552:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002556:	f003 0320 	and.w	r3, r3, #32
 800255a:	2b00      	cmp	r3, #0
 800255c:	d105      	bne.n	800256a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800255e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d007      	beq.n	800257a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800256e:	2b00      	cmp	r3, #0
 8002570:	d003      	beq.n	800257a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002580:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689b      	ldr	r3, [r3, #8]
 800258a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258e:	2b40      	cmp	r3, #64	; 0x40
 8002590:	d005      	beq.n	800259e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002592:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002596:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800259a:	2b00      	cmp	r3, #0
 800259c:	d054      	beq.n	8002648 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 fef9 	bl	8003396 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ae:	2b40      	cmp	r3, #64	; 0x40
 80025b0:	d146      	bne.n	8002640 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	3308      	adds	r3, #8
 80025b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80025c0:	e853 3f00 	ldrex	r3, [r3]
 80025c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80025c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	3308      	adds	r3, #8
 80025da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80025de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80025e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80025ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80025ee:	e841 2300 	strex	r3, r2, [r1]
 80025f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80025f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1d9      	bne.n	80025b2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002604:	2b00      	cmp	r3, #0
 8002606:	d017      	beq.n	8002638 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800260e:	4a15      	ldr	r2, [pc, #84]	; (8002664 <HAL_UART_IRQHandler+0x2c0>)
 8002610:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002618:	4618      	mov	r0, r3
 800261a:	f7fe fb8f 	bl	8000d3c <HAL_DMA_Abort_IT>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d019      	beq.n	8002658 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800262a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8002632:	4610      	mov	r0, r2
 8002634:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002636:	e00f      	b.n	8002658 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f000 f9e1 	bl	8002a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800263e:	e00b      	b.n	8002658 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 f9dd 	bl	8002a00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002646:	e007      	b.n	8002658 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f000 f9d9 	bl	8002a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2200      	movs	r2, #0
 8002652:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8002656:	e1bf      	b.n	80029d8 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002658:	bf00      	nop
    return;
 800265a:	e1bd      	b.n	80029d8 <HAL_UART_IRQHandler+0x634>
 800265c:	10000001 	.word	0x10000001
 8002660:	04000120 	.word	0x04000120
 8002664:	08003463 	.word	0x08003463

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800266c:	2b01      	cmp	r3, #1
 800266e:	f040 8153 	bne.w	8002918 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002676:	f003 0310 	and.w	r3, r3, #16
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 814c 	beq.w	8002918 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002684:	f003 0310 	and.w	r3, r3, #16
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 8145 	beq.w	8002918 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2210      	movs	r2, #16
 8002694:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a0:	2b40      	cmp	r3, #64	; 0x40
 80026a2:	f040 80bb 	bne.w	800281c <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80026b4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 818f 	beq.w	80029dc <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80026c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026c8:	429a      	cmp	r2, r3
 80026ca:	f080 8187 	bcs.w	80029dc <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80026d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	f040 8087 	bne.w	80027fa <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80026f8:	e853 3f00 	ldrex	r3, [r3]
 80026fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002700:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002708:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	461a      	mov	r2, r3
 8002712:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002716:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800271a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800271e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002722:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002726:	e841 2300 	strex	r3, r2, [r1]
 800272a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800272e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1da      	bne.n	80026ec <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	3308      	adds	r3, #8
 800273c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002740:	e853 3f00 	ldrex	r3, [r3]
 8002744:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002748:	f023 0301 	bic.w	r3, r3, #1
 800274c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	3308      	adds	r3, #8
 8002756:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800275a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800275e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002760:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002762:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002766:	e841 2300 	strex	r3, r2, [r1]
 800276a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800276c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1e1      	bne.n	8002736 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	3308      	adds	r3, #8
 8002778:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800277a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800277c:	e853 3f00 	ldrex	r3, [r3]
 8002780:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	3308      	adds	r3, #8
 8002792:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002796:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002798:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800279a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800279c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800279e:	e841 2300 	strex	r3, r2, [r1]
 80027a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80027a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1e3      	bne.n	8002772 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2220      	movs	r2, #32
 80027ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027c0:	e853 3f00 	ldrex	r3, [r3]
 80027c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80027c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027c8:	f023 0310 	bic.w	r3, r3, #16
 80027cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	461a      	mov	r2, r3
 80027d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027da:	65bb      	str	r3, [r7, #88]	; 0x58
 80027dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80027e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80027e2:	e841 2300 	strex	r3, r2, [r1]
 80027e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80027e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d1e4      	bne.n	80027b8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027f4:	4618      	mov	r0, r3
 80027f6:	f7fe fa48 	bl	8000c8a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2202      	movs	r2, #2
 80027fe:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800280c:	b29b      	uxth	r3, r3
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	b29b      	uxth	r3, r3
 8002812:	4619      	mov	r1, r3
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f000 f8fd 	bl	8002a14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800281a:	e0df      	b.n	80029dc <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002828:	b29b      	uxth	r3, r3
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8002836:	b29b      	uxth	r3, r3
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 80d1 	beq.w	80029e0 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800283e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002842:	2b00      	cmp	r3, #0
 8002844:	f000 80cc 	beq.w	80029e0 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800284e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002850:	e853 3f00 	ldrex	r3, [r3]
 8002854:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002858:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800285c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800286a:	647b      	str	r3, [r7, #68]	; 0x44
 800286c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800286e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002870:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002872:	e841 2300 	strex	r3, r2, [r1]
 8002876:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002878:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800287a:	2b00      	cmp	r3, #0
 800287c:	d1e4      	bne.n	8002848 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	3308      	adds	r3, #8
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	e853 3f00 	ldrex	r3, [r3]
 800288c:	623b      	str	r3, [r7, #32]
   return(result);
 800288e:	6a3b      	ldr	r3, [r7, #32]
 8002890:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002894:	f023 0301 	bic.w	r3, r3, #1
 8002898:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	3308      	adds	r3, #8
 80028a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80028a6:	633a      	str	r2, [r7, #48]	; 0x30
 80028a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80028ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028ae:	e841 2300 	strex	r3, r2, [r1]
 80028b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80028b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1e1      	bne.n	800287e <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2220      	movs	r2, #32
 80028be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	e853 3f00 	ldrex	r3, [r3]
 80028da:	60fb      	str	r3, [r7, #12]
   return(result);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	f023 0310 	bic.w	r3, r3, #16
 80028e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028f0:	61fb      	str	r3, [r7, #28]
 80028f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028f4:	69b9      	ldr	r1, [r7, #24]
 80028f6:	69fa      	ldr	r2, [r7, #28]
 80028f8:	e841 2300 	strex	r3, r2, [r1]
 80028fc:	617b      	str	r3, [r7, #20]
   return(result);
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1e4      	bne.n	80028ce <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2202      	movs	r2, #2
 8002908:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800290a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800290e:	4619      	mov	r1, r3
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	f000 f87f 	bl	8002a14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002916:	e063      	b.n	80029e0 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800291c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00e      	beq.n	8002942 <HAL_UART_IRQHandler+0x59e>
 8002924:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002928:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002938:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 fdd2 	bl	80034e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002940:	e051      	b.n	80029e6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800294a:	2b00      	cmp	r3, #0
 800294c:	d014      	beq.n	8002978 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800294e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002956:	2b00      	cmp	r3, #0
 8002958:	d105      	bne.n	8002966 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800295a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800295e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d008      	beq.n	8002978 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800296a:	2b00      	cmp	r3, #0
 800296c:	d03a      	beq.n	80029e4 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	4798      	blx	r3
    }
    return;
 8002976:	e035      	b.n	80029e4 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800297c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002980:	2b00      	cmp	r3, #0
 8002982:	d009      	beq.n	8002998 <HAL_UART_IRQHandler+0x5f4>
 8002984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800298c:	2b00      	cmp	r3, #0
 800298e:	d003      	beq.n	8002998 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 fd7c 	bl	800348e <UART_EndTransmit_IT>
    return;
 8002996:	e026      	b.n	80029e6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800299c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d009      	beq.n	80029b8 <HAL_UART_IRQHandler+0x614>
 80029a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d003      	beq.n	80029b8 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80029b0:	6878      	ldr	r0, [r7, #4]
 80029b2:	f000 fdab 	bl	800350c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029b6:	e016      	b.n	80029e6 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80029b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d010      	beq.n	80029e6 <HAL_UART_IRQHandler+0x642>
 80029c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	da0c      	bge.n	80029e6 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 fd93 	bl	80034f8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80029d2:	e008      	b.n	80029e6 <HAL_UART_IRQHandler+0x642>
      return;
 80029d4:	bf00      	nop
 80029d6:	e006      	b.n	80029e6 <HAL_UART_IRQHandler+0x642>
    return;
 80029d8:	bf00      	nop
 80029da:	e004      	b.n	80029e6 <HAL_UART_IRQHandler+0x642>
      return;
 80029dc:	bf00      	nop
 80029de:	e002      	b.n	80029e6 <HAL_UART_IRQHandler+0x642>
      return;
 80029e0:	bf00      	nop
 80029e2:	e000      	b.n	80029e6 <HAL_UART_IRQHandler+0x642>
    return;
 80029e4:	bf00      	nop
  }
}
 80029e6:	37e8      	adds	r7, #232	; 0xe8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr

08002a2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a30:	b08c      	sub	sp, #48	; 0x30
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a36:	2300      	movs	r3, #0
 8002a38:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	691b      	ldr	r3, [r3, #16]
 8002a44:	431a      	orrs	r2, r3
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	4baa      	ldr	r3, [pc, #680]	; (8002d04 <UART_SetConfig+0x2d8>)
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	6812      	ldr	r2, [r2, #0]
 8002a62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a64:	430b      	orrs	r3, r1
 8002a66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a9f      	ldr	r2, [pc, #636]	; (8002d08 <UART_SetConfig+0x2dc>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d004      	beq.n	8002a98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a94:	4313      	orrs	r3, r2
 8002a96:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002aa2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002aa6:	697a      	ldr	r2, [r7, #20]
 8002aa8:	6812      	ldr	r2, [r2, #0]
 8002aaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002aac:	430b      	orrs	r3, r1
 8002aae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	f023 010f 	bic.w	r1, r3, #15
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	430a      	orrs	r2, r1
 8002ac4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a90      	ldr	r2, [pc, #576]	; (8002d0c <UART_SetConfig+0x2e0>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d125      	bne.n	8002b1c <UART_SetConfig+0xf0>
 8002ad0:	4b8f      	ldr	r3, [pc, #572]	; (8002d10 <UART_SetConfig+0x2e4>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	2b03      	cmp	r3, #3
 8002adc:	d81a      	bhi.n	8002b14 <UART_SetConfig+0xe8>
 8002ade:	a201      	add	r2, pc, #4	; (adr r2, 8002ae4 <UART_SetConfig+0xb8>)
 8002ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae4:	08002af5 	.word	0x08002af5
 8002ae8:	08002b05 	.word	0x08002b05
 8002aec:	08002afd 	.word	0x08002afd
 8002af0:	08002b0d 	.word	0x08002b0d
 8002af4:	2301      	movs	r3, #1
 8002af6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002afa:	e116      	b.n	8002d2a <UART_SetConfig+0x2fe>
 8002afc:	2302      	movs	r3, #2
 8002afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b02:	e112      	b.n	8002d2a <UART_SetConfig+0x2fe>
 8002b04:	2304      	movs	r3, #4
 8002b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b0a:	e10e      	b.n	8002d2a <UART_SetConfig+0x2fe>
 8002b0c:	2308      	movs	r3, #8
 8002b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b12:	e10a      	b.n	8002d2a <UART_SetConfig+0x2fe>
 8002b14:	2310      	movs	r3, #16
 8002b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b1a:	e106      	b.n	8002d2a <UART_SetConfig+0x2fe>
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a7c      	ldr	r2, [pc, #496]	; (8002d14 <UART_SetConfig+0x2e8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d138      	bne.n	8002b98 <UART_SetConfig+0x16c>
 8002b26:	4b7a      	ldr	r3, [pc, #488]	; (8002d10 <UART_SetConfig+0x2e4>)
 8002b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2c:	f003 030c 	and.w	r3, r3, #12
 8002b30:	2b0c      	cmp	r3, #12
 8002b32:	d82d      	bhi.n	8002b90 <UART_SetConfig+0x164>
 8002b34:	a201      	add	r2, pc, #4	; (adr r2, 8002b3c <UART_SetConfig+0x110>)
 8002b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b3a:	bf00      	nop
 8002b3c:	08002b71 	.word	0x08002b71
 8002b40:	08002b91 	.word	0x08002b91
 8002b44:	08002b91 	.word	0x08002b91
 8002b48:	08002b91 	.word	0x08002b91
 8002b4c:	08002b81 	.word	0x08002b81
 8002b50:	08002b91 	.word	0x08002b91
 8002b54:	08002b91 	.word	0x08002b91
 8002b58:	08002b91 	.word	0x08002b91
 8002b5c:	08002b79 	.word	0x08002b79
 8002b60:	08002b91 	.word	0x08002b91
 8002b64:	08002b91 	.word	0x08002b91
 8002b68:	08002b91 	.word	0x08002b91
 8002b6c:	08002b89 	.word	0x08002b89
 8002b70:	2300      	movs	r3, #0
 8002b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b76:	e0d8      	b.n	8002d2a <UART_SetConfig+0x2fe>
 8002b78:	2302      	movs	r3, #2
 8002b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b7e:	e0d4      	b.n	8002d2a <UART_SetConfig+0x2fe>
 8002b80:	2304      	movs	r3, #4
 8002b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b86:	e0d0      	b.n	8002d2a <UART_SetConfig+0x2fe>
 8002b88:	2308      	movs	r3, #8
 8002b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b8e:	e0cc      	b.n	8002d2a <UART_SetConfig+0x2fe>
 8002b90:	2310      	movs	r3, #16
 8002b92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b96:	e0c8      	b.n	8002d2a <UART_SetConfig+0x2fe>
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a5e      	ldr	r2, [pc, #376]	; (8002d18 <UART_SetConfig+0x2ec>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d125      	bne.n	8002bee <UART_SetConfig+0x1c2>
 8002ba2:	4b5b      	ldr	r3, [pc, #364]	; (8002d10 <UART_SetConfig+0x2e4>)
 8002ba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002bac:	2b30      	cmp	r3, #48	; 0x30
 8002bae:	d016      	beq.n	8002bde <UART_SetConfig+0x1b2>
 8002bb0:	2b30      	cmp	r3, #48	; 0x30
 8002bb2:	d818      	bhi.n	8002be6 <UART_SetConfig+0x1ba>
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	d00a      	beq.n	8002bce <UART_SetConfig+0x1a2>
 8002bb8:	2b20      	cmp	r3, #32
 8002bba:	d814      	bhi.n	8002be6 <UART_SetConfig+0x1ba>
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d002      	beq.n	8002bc6 <UART_SetConfig+0x19a>
 8002bc0:	2b10      	cmp	r3, #16
 8002bc2:	d008      	beq.n	8002bd6 <UART_SetConfig+0x1aa>
 8002bc4:	e00f      	b.n	8002be6 <UART_SetConfig+0x1ba>
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bcc:	e0ad      	b.n	8002d2a <UART_SetConfig+0x2fe>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bd4:	e0a9      	b.n	8002d2a <UART_SetConfig+0x2fe>
 8002bd6:	2304      	movs	r3, #4
 8002bd8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bdc:	e0a5      	b.n	8002d2a <UART_SetConfig+0x2fe>
 8002bde:	2308      	movs	r3, #8
 8002be0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002be4:	e0a1      	b.n	8002d2a <UART_SetConfig+0x2fe>
 8002be6:	2310      	movs	r3, #16
 8002be8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bec:	e09d      	b.n	8002d2a <UART_SetConfig+0x2fe>
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a4a      	ldr	r2, [pc, #296]	; (8002d1c <UART_SetConfig+0x2f0>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d125      	bne.n	8002c44 <UART_SetConfig+0x218>
 8002bf8:	4b45      	ldr	r3, [pc, #276]	; (8002d10 <UART_SetConfig+0x2e4>)
 8002bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002c02:	2bc0      	cmp	r3, #192	; 0xc0
 8002c04:	d016      	beq.n	8002c34 <UART_SetConfig+0x208>
 8002c06:	2bc0      	cmp	r3, #192	; 0xc0
 8002c08:	d818      	bhi.n	8002c3c <UART_SetConfig+0x210>
 8002c0a:	2b80      	cmp	r3, #128	; 0x80
 8002c0c:	d00a      	beq.n	8002c24 <UART_SetConfig+0x1f8>
 8002c0e:	2b80      	cmp	r3, #128	; 0x80
 8002c10:	d814      	bhi.n	8002c3c <UART_SetConfig+0x210>
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <UART_SetConfig+0x1f0>
 8002c16:	2b40      	cmp	r3, #64	; 0x40
 8002c18:	d008      	beq.n	8002c2c <UART_SetConfig+0x200>
 8002c1a:	e00f      	b.n	8002c3c <UART_SetConfig+0x210>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c22:	e082      	b.n	8002d2a <UART_SetConfig+0x2fe>
 8002c24:	2302      	movs	r3, #2
 8002c26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c2a:	e07e      	b.n	8002d2a <UART_SetConfig+0x2fe>
 8002c2c:	2304      	movs	r3, #4
 8002c2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c32:	e07a      	b.n	8002d2a <UART_SetConfig+0x2fe>
 8002c34:	2308      	movs	r3, #8
 8002c36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c3a:	e076      	b.n	8002d2a <UART_SetConfig+0x2fe>
 8002c3c:	2310      	movs	r3, #16
 8002c3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c42:	e072      	b.n	8002d2a <UART_SetConfig+0x2fe>
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a35      	ldr	r2, [pc, #212]	; (8002d20 <UART_SetConfig+0x2f4>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d12a      	bne.n	8002ca4 <UART_SetConfig+0x278>
 8002c4e:	4b30      	ldr	r3, [pc, #192]	; (8002d10 <UART_SetConfig+0x2e4>)
 8002c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c5c:	d01a      	beq.n	8002c94 <UART_SetConfig+0x268>
 8002c5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c62:	d81b      	bhi.n	8002c9c <UART_SetConfig+0x270>
 8002c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c68:	d00c      	beq.n	8002c84 <UART_SetConfig+0x258>
 8002c6a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c6e:	d815      	bhi.n	8002c9c <UART_SetConfig+0x270>
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d003      	beq.n	8002c7c <UART_SetConfig+0x250>
 8002c74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c78:	d008      	beq.n	8002c8c <UART_SetConfig+0x260>
 8002c7a:	e00f      	b.n	8002c9c <UART_SetConfig+0x270>
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c82:	e052      	b.n	8002d2a <UART_SetConfig+0x2fe>
 8002c84:	2302      	movs	r3, #2
 8002c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c8a:	e04e      	b.n	8002d2a <UART_SetConfig+0x2fe>
 8002c8c:	2304      	movs	r3, #4
 8002c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c92:	e04a      	b.n	8002d2a <UART_SetConfig+0x2fe>
 8002c94:	2308      	movs	r3, #8
 8002c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c9a:	e046      	b.n	8002d2a <UART_SetConfig+0x2fe>
 8002c9c:	2310      	movs	r3, #16
 8002c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ca2:	e042      	b.n	8002d2a <UART_SetConfig+0x2fe>
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a17      	ldr	r2, [pc, #92]	; (8002d08 <UART_SetConfig+0x2dc>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d13a      	bne.n	8002d24 <UART_SetConfig+0x2f8>
 8002cae:	4b18      	ldr	r3, [pc, #96]	; (8002d10 <UART_SetConfig+0x2e4>)
 8002cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002cb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002cbc:	d01a      	beq.n	8002cf4 <UART_SetConfig+0x2c8>
 8002cbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002cc2:	d81b      	bhi.n	8002cfc <UART_SetConfig+0x2d0>
 8002cc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cc8:	d00c      	beq.n	8002ce4 <UART_SetConfig+0x2b8>
 8002cca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cce:	d815      	bhi.n	8002cfc <UART_SetConfig+0x2d0>
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d003      	beq.n	8002cdc <UART_SetConfig+0x2b0>
 8002cd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cd8:	d008      	beq.n	8002cec <UART_SetConfig+0x2c0>
 8002cda:	e00f      	b.n	8002cfc <UART_SetConfig+0x2d0>
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ce2:	e022      	b.n	8002d2a <UART_SetConfig+0x2fe>
 8002ce4:	2302      	movs	r3, #2
 8002ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cea:	e01e      	b.n	8002d2a <UART_SetConfig+0x2fe>
 8002cec:	2304      	movs	r3, #4
 8002cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cf2:	e01a      	b.n	8002d2a <UART_SetConfig+0x2fe>
 8002cf4:	2308      	movs	r3, #8
 8002cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cfa:	e016      	b.n	8002d2a <UART_SetConfig+0x2fe>
 8002cfc:	2310      	movs	r3, #16
 8002cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d02:	e012      	b.n	8002d2a <UART_SetConfig+0x2fe>
 8002d04:	cfff69f3 	.word	0xcfff69f3
 8002d08:	40008000 	.word	0x40008000
 8002d0c:	40013800 	.word	0x40013800
 8002d10:	40021000 	.word	0x40021000
 8002d14:	40004400 	.word	0x40004400
 8002d18:	40004800 	.word	0x40004800
 8002d1c:	40004c00 	.word	0x40004c00
 8002d20:	40005000 	.word	0x40005000
 8002d24:	2310      	movs	r3, #16
 8002d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4aae      	ldr	r2, [pc, #696]	; (8002fe8 <UART_SetConfig+0x5bc>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	f040 8097 	bne.w	8002e64 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002d36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d3a:	2b08      	cmp	r3, #8
 8002d3c:	d823      	bhi.n	8002d86 <UART_SetConfig+0x35a>
 8002d3e:	a201      	add	r2, pc, #4	; (adr r2, 8002d44 <UART_SetConfig+0x318>)
 8002d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d44:	08002d69 	.word	0x08002d69
 8002d48:	08002d87 	.word	0x08002d87
 8002d4c:	08002d71 	.word	0x08002d71
 8002d50:	08002d87 	.word	0x08002d87
 8002d54:	08002d77 	.word	0x08002d77
 8002d58:	08002d87 	.word	0x08002d87
 8002d5c:	08002d87 	.word	0x08002d87
 8002d60:	08002d87 	.word	0x08002d87
 8002d64:	08002d7f 	.word	0x08002d7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d68:	f7fe ff7e 	bl	8001c68 <HAL_RCC_GetPCLK1Freq>
 8002d6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002d6e:	e010      	b.n	8002d92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d70:	4b9e      	ldr	r3, [pc, #632]	; (8002fec <UART_SetConfig+0x5c0>)
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002d74:	e00d      	b.n	8002d92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d76:	f7fe ff09 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 8002d7a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002d7c:	e009      	b.n	8002d92 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002d84:	e005      	b.n	8002d92 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8002d86:	2300      	movs	r3, #0
 8002d88:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002d90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 8130 	beq.w	8002ffa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	4a94      	ldr	r2, [pc, #592]	; (8002ff0 <UART_SetConfig+0x5c4>)
 8002da0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002da4:	461a      	mov	r2, r3
 8002da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	685a      	ldr	r2, [r3, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	4413      	add	r3, r2
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d305      	bcc.n	8002dca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d903      	bls.n	8002dd2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002dd0:	e113      	b.n	8002ffa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	60bb      	str	r3, [r7, #8]
 8002dd8:	60fa      	str	r2, [r7, #12]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	4a84      	ldr	r2, [pc, #528]	; (8002ff0 <UART_SetConfig+0x5c4>)
 8002de0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2200      	movs	r2, #0
 8002de8:	603b      	str	r3, [r7, #0]
 8002dea:	607a      	str	r2, [r7, #4]
 8002dec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002df0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002df4:	f7fd fa10 	bl	8000218 <__aeabi_uldivmod>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4610      	mov	r0, r2
 8002dfe:	4619      	mov	r1, r3
 8002e00:	f04f 0200 	mov.w	r2, #0
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	020b      	lsls	r3, r1, #8
 8002e0a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002e0e:	0202      	lsls	r2, r0, #8
 8002e10:	6979      	ldr	r1, [r7, #20]
 8002e12:	6849      	ldr	r1, [r1, #4]
 8002e14:	0849      	lsrs	r1, r1, #1
 8002e16:	2000      	movs	r0, #0
 8002e18:	460c      	mov	r4, r1
 8002e1a:	4605      	mov	r5, r0
 8002e1c:	eb12 0804 	adds.w	r8, r2, r4
 8002e20:	eb43 0905 	adc.w	r9, r3, r5
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	469a      	mov	sl, r3
 8002e2c:	4693      	mov	fp, r2
 8002e2e:	4652      	mov	r2, sl
 8002e30:	465b      	mov	r3, fp
 8002e32:	4640      	mov	r0, r8
 8002e34:	4649      	mov	r1, r9
 8002e36:	f7fd f9ef 	bl	8000218 <__aeabi_uldivmod>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	4613      	mov	r3, r2
 8002e40:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e48:	d308      	bcc.n	8002e5c <UART_SetConfig+0x430>
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
 8002e4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e50:	d204      	bcs.n	8002e5c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6a3a      	ldr	r2, [r7, #32]
 8002e58:	60da      	str	r2, [r3, #12]
 8002e5a:	e0ce      	b.n	8002ffa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002e62:	e0ca      	b.n	8002ffa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e6c:	d166      	bne.n	8002f3c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8002e6e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d827      	bhi.n	8002ec6 <UART_SetConfig+0x49a>
 8002e76:	a201      	add	r2, pc, #4	; (adr r2, 8002e7c <UART_SetConfig+0x450>)
 8002e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e7c:	08002ea1 	.word	0x08002ea1
 8002e80:	08002ea9 	.word	0x08002ea9
 8002e84:	08002eb1 	.word	0x08002eb1
 8002e88:	08002ec7 	.word	0x08002ec7
 8002e8c:	08002eb7 	.word	0x08002eb7
 8002e90:	08002ec7 	.word	0x08002ec7
 8002e94:	08002ec7 	.word	0x08002ec7
 8002e98:	08002ec7 	.word	0x08002ec7
 8002e9c:	08002ebf 	.word	0x08002ebf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ea0:	f7fe fee2 	bl	8001c68 <HAL_RCC_GetPCLK1Freq>
 8002ea4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002ea6:	e014      	b.n	8002ed2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ea8:	f7fe fef4 	bl	8001c94 <HAL_RCC_GetPCLK2Freq>
 8002eac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002eae:	e010      	b.n	8002ed2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002eb0:	4b4e      	ldr	r3, [pc, #312]	; (8002fec <UART_SetConfig+0x5c0>)
 8002eb2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002eb4:	e00d      	b.n	8002ed2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002eb6:	f7fe fe69 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 8002eba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002ebc:	e009      	b.n	8002ed2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ebe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ec2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002ec4:	e005      	b.n	8002ed2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002ed0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 8090 	beq.w	8002ffa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	4a44      	ldr	r2, [pc, #272]	; (8002ff0 <UART_SetConfig+0x5c4>)
 8002ee0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002eec:	005a      	lsls	r2, r3, #1
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	085b      	lsrs	r3, r3, #1
 8002ef4:	441a      	add	r2, r3
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002efe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	2b0f      	cmp	r3, #15
 8002f04:	d916      	bls.n	8002f34 <UART_SetConfig+0x508>
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f0c:	d212      	bcs.n	8002f34 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	f023 030f 	bic.w	r3, r3, #15
 8002f16:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f18:	6a3b      	ldr	r3, [r7, #32]
 8002f1a:	085b      	lsrs	r3, r3, #1
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	f003 0307 	and.w	r3, r3, #7
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	8bfb      	ldrh	r3, [r7, #30]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	8bfa      	ldrh	r2, [r7, #30]
 8002f30:	60da      	str	r2, [r3, #12]
 8002f32:	e062      	b.n	8002ffa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002f3a:	e05e      	b.n	8002ffa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d828      	bhi.n	8002f96 <UART_SetConfig+0x56a>
 8002f44:	a201      	add	r2, pc, #4	; (adr r2, 8002f4c <UART_SetConfig+0x520>)
 8002f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f4a:	bf00      	nop
 8002f4c:	08002f71 	.word	0x08002f71
 8002f50:	08002f79 	.word	0x08002f79
 8002f54:	08002f81 	.word	0x08002f81
 8002f58:	08002f97 	.word	0x08002f97
 8002f5c:	08002f87 	.word	0x08002f87
 8002f60:	08002f97 	.word	0x08002f97
 8002f64:	08002f97 	.word	0x08002f97
 8002f68:	08002f97 	.word	0x08002f97
 8002f6c:	08002f8f 	.word	0x08002f8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f70:	f7fe fe7a 	bl	8001c68 <HAL_RCC_GetPCLK1Freq>
 8002f74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002f76:	e014      	b.n	8002fa2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f78:	f7fe fe8c 	bl	8001c94 <HAL_RCC_GetPCLK2Freq>
 8002f7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002f7e:	e010      	b.n	8002fa2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f80:	4b1a      	ldr	r3, [pc, #104]	; (8002fec <UART_SetConfig+0x5c0>)
 8002f82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002f84:	e00d      	b.n	8002fa2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f86:	f7fe fe01 	bl	8001b8c <HAL_RCC_GetSysClockFreq>
 8002f8a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002f8c:	e009      	b.n	8002fa2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002f94:	e005      	b.n	8002fa2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8002f96:	2300      	movs	r3, #0
 8002f98:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002fa0:	bf00      	nop
    }

    if (pclk != 0U)
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d028      	beq.n	8002ffa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	4a10      	ldr	r2, [pc, #64]	; (8002ff0 <UART_SetConfig+0x5c4>)
 8002fae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb6:	fbb3 f2f2 	udiv	r2, r3, r2
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	085b      	lsrs	r3, r3, #1
 8002fc0:	441a      	add	r2, r3
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fcc:	6a3b      	ldr	r3, [r7, #32]
 8002fce:	2b0f      	cmp	r3, #15
 8002fd0:	d910      	bls.n	8002ff4 <UART_SetConfig+0x5c8>
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd8:	d20c      	bcs.n	8002ff4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002fda:	6a3b      	ldr	r3, [r7, #32]
 8002fdc:	b29a      	uxth	r2, r3
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	60da      	str	r2, [r3, #12]
 8002fe4:	e009      	b.n	8002ffa <UART_SetConfig+0x5ce>
 8002fe6:	bf00      	nop
 8002fe8:	40008000 	.word	0x40008000
 8002fec:	00f42400 	.word	0x00f42400
 8002ff0:	080037b0 	.word	0x080037b0
      }
      else
      {
        ret = HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	2201      	movs	r2, #1
 8003006:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2200      	movs	r2, #0
 800300e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	2200      	movs	r2, #0
 8003014:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003016:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800301a:	4618      	mov	r0, r3
 800301c:	3730      	adds	r7, #48	; 0x30
 800301e:	46bd      	mov	sp, r7
 8003020:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003024 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b00      	cmp	r3, #0
 8003036:	d00a      	beq.n	800304e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d00a      	beq.n	8003070 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00a      	beq.n	8003092 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003096:	f003 0304 	and.w	r3, r3, #4
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00a      	beq.n	80030b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b8:	f003 0310 	and.w	r3, r3, #16
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00a      	beq.n	80030d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030da:	f003 0320 	and.w	r3, r3, #32
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d00a      	beq.n	80030f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	430a      	orrs	r2, r1
 80030f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003100:	2b00      	cmp	r3, #0
 8003102:	d01a      	beq.n	800313a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003122:	d10a      	bne.n	800313a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	605a      	str	r2, [r3, #4]
  }
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b098      	sub	sp, #96	; 0x60
 800316c:	af02      	add	r7, sp, #8
 800316e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003178:	f7fd fc4a 	bl	8000a10 <HAL_GetTick>
 800317c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0308 	and.w	r3, r3, #8
 8003188:	2b08      	cmp	r3, #8
 800318a:	d12f      	bne.n	80031ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800318c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003190:	9300      	str	r3, [sp, #0]
 8003192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003194:	2200      	movs	r2, #0
 8003196:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f000 f88e 	bl	80032bc <UART_WaitOnFlagUntilTimeout>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d022      	beq.n	80031ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ae:	e853 3f00 	ldrex	r3, [r3]
 80031b2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80031b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031ba:	653b      	str	r3, [r7, #80]	; 0x50
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031c4:	647b      	str	r3, [r7, #68]	; 0x44
 80031c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80031ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031cc:	e841 2300 	strex	r3, r2, [r1]
 80031d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80031d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1e6      	bne.n	80031a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2220      	movs	r2, #32
 80031dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031e8:	2303      	movs	r3, #3
 80031ea:	e063      	b.n	80032b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d149      	bne.n	800328e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003202:	2200      	movs	r2, #0
 8003204:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003208:	6878      	ldr	r0, [r7, #4]
 800320a:	f000 f857 	bl	80032bc <UART_WaitOnFlagUntilTimeout>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d03c      	beq.n	800328e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	e853 3f00 	ldrex	r3, [r3]
 8003220:	623b      	str	r3, [r7, #32]
   return(result);
 8003222:	6a3b      	ldr	r3, [r7, #32]
 8003224:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003228:	64fb      	str	r3, [r7, #76]	; 0x4c
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003232:	633b      	str	r3, [r7, #48]	; 0x30
 8003234:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003236:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800323a:	e841 2300 	strex	r3, r2, [r1]
 800323e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003240:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1e6      	bne.n	8003214 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	3308      	adds	r3, #8
 800324c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	e853 3f00 	ldrex	r3, [r3]
 8003254:	60fb      	str	r3, [r7, #12]
   return(result);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f023 0301 	bic.w	r3, r3, #1
 800325c:	64bb      	str	r3, [r7, #72]	; 0x48
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	3308      	adds	r3, #8
 8003264:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003266:	61fa      	str	r2, [r7, #28]
 8003268:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326a:	69b9      	ldr	r1, [r7, #24]
 800326c:	69fa      	ldr	r2, [r7, #28]
 800326e:	e841 2300 	strex	r3, r2, [r1]
 8003272:	617b      	str	r3, [r7, #20]
   return(result);
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1e5      	bne.n	8003246 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2220      	movs	r2, #32
 800327e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e012      	b.n	80032b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2220      	movs	r2, #32
 8003292:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2220      	movs	r2, #32
 800329a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3758      	adds	r7, #88	; 0x58
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	603b      	str	r3, [r7, #0]
 80032c8:	4613      	mov	r3, r2
 80032ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032cc:	e04f      	b.n	800336e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ce:	69bb      	ldr	r3, [r7, #24]
 80032d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032d4:	d04b      	beq.n	800336e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d6:	f7fd fb9b 	bl	8000a10 <HAL_GetTick>
 80032da:	4602      	mov	r2, r0
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	1ad3      	subs	r3, r2, r3
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d302      	bcc.n	80032ec <UART_WaitOnFlagUntilTimeout+0x30>
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d101      	bne.n	80032f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e04e      	b.n	800338e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0304 	and.w	r3, r3, #4
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d037      	beq.n	800336e <UART_WaitOnFlagUntilTimeout+0xb2>
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b80      	cmp	r3, #128	; 0x80
 8003302:	d034      	beq.n	800336e <UART_WaitOnFlagUntilTimeout+0xb2>
 8003304:	68bb      	ldr	r3, [r7, #8]
 8003306:	2b40      	cmp	r3, #64	; 0x40
 8003308:	d031      	beq.n	800336e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	69db      	ldr	r3, [r3, #28]
 8003310:	f003 0308 	and.w	r3, r3, #8
 8003314:	2b08      	cmp	r3, #8
 8003316:	d110      	bne.n	800333a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2208      	movs	r2, #8
 800331e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f000 f838 	bl	8003396 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2208      	movs	r2, #8
 800332a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e029      	b.n	800338e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	69db      	ldr	r3, [r3, #28]
 8003340:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003348:	d111      	bne.n	800336e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003352:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 f81e 	bl	8003396 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2220      	movs	r2, #32
 800335e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e00f      	b.n	800338e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	69da      	ldr	r2, [r3, #28]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	4013      	ands	r3, r2
 8003378:	68ba      	ldr	r2, [r7, #8]
 800337a:	429a      	cmp	r2, r3
 800337c:	bf0c      	ite	eq
 800337e:	2301      	moveq	r3, #1
 8003380:	2300      	movne	r3, #0
 8003382:	b2db      	uxtb	r3, r3
 8003384:	461a      	mov	r2, r3
 8003386:	79fb      	ldrb	r3, [r7, #7]
 8003388:	429a      	cmp	r2, r3
 800338a:	d0a0      	beq.n	80032ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003396:	b480      	push	{r7}
 8003398:	b095      	sub	sp, #84	; 0x54
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033a6:	e853 3f00 	ldrex	r3, [r3]
 80033aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80033ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	461a      	mov	r2, r3
 80033ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033bc:	643b      	str	r3, [r7, #64]	; 0x40
 80033be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80033c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80033c4:	e841 2300 	strex	r3, r2, [r1]
 80033c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1e6      	bne.n	800339e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	3308      	adds	r3, #8
 80033d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d8:	6a3b      	ldr	r3, [r7, #32]
 80033da:	e853 3f00 	ldrex	r3, [r3]
 80033de:	61fb      	str	r3, [r7, #28]
   return(result);
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e6:	f023 0301 	bic.w	r3, r3, #1
 80033ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	3308      	adds	r3, #8
 80033f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033fc:	e841 2300 	strex	r3, r2, [r1]
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1e3      	bne.n	80033d0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800340c:	2b01      	cmp	r3, #1
 800340e:	d118      	bne.n	8003442 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	e853 3f00 	ldrex	r3, [r3]
 800341c:	60bb      	str	r3, [r7, #8]
   return(result);
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	f023 0310 	bic.w	r3, r3, #16
 8003424:	647b      	str	r3, [r7, #68]	; 0x44
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	461a      	mov	r2, r3
 800342c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800342e:	61bb      	str	r3, [r7, #24]
 8003430:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003432:	6979      	ldr	r1, [r7, #20]
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	e841 2300 	strex	r3, r2, [r1]
 800343a:	613b      	str	r3, [r7, #16]
   return(result);
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1e6      	bne.n	8003410 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2220      	movs	r2, #32
 8003446:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003456:	bf00      	nop
 8003458:	3754      	adds	r7, #84	; 0x54
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b084      	sub	sp, #16
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800346e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f7ff fabd 	bl	8002a00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003486:	bf00      	nop
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}

0800348e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b088      	sub	sp, #32
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	e853 3f00 	ldrex	r3, [r3]
 80034a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034aa:	61fb      	str	r3, [r7, #28]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	461a      	mov	r2, r3
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	61bb      	str	r3, [r7, #24]
 80034b6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b8:	6979      	ldr	r1, [r7, #20]
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	e841 2300 	strex	r3, r2, [r1]
 80034c0:	613b      	str	r3, [r7, #16]
   return(result);
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1e6      	bne.n	8003496 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7ff fa88 	bl	80029ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034dc:	bf00      	nop
 80034de:	3720      	adds	r7, #32
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800350c:	b480      	push	{r7}
 800350e:	b083      	sub	sp, #12
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003514:	bf00      	nop
 8003516:	370c      	adds	r7, #12
 8003518:	46bd      	mov	sp, r7
 800351a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351e:	4770      	bx	lr

08003520 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003520:	b480      	push	{r7}
 8003522:	b085      	sub	sp, #20
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800352e:	2b01      	cmp	r3, #1
 8003530:	d101      	bne.n	8003536 <HAL_UARTEx_DisableFifoMode+0x16>
 8003532:	2302      	movs	r3, #2
 8003534:	e027      	b.n	8003586 <HAL_UARTEx_DisableFifoMode+0x66>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2224      	movs	r2, #36	; 0x24
 8003542:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0201 	bic.w	r2, r2, #1
 800355c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003564:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	68fa      	ldr	r2, [r7, #12]
 8003572:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2220      	movs	r2, #32
 8003578:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3714      	adds	r7, #20
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b084      	sub	sp, #16
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80035a6:	2302      	movs	r3, #2
 80035a8:	e02d      	b.n	8003606 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2224      	movs	r2, #36	; 0x24
 80035b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f022 0201 	bic.w	r2, r2, #1
 80035d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f850 	bl	800368c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b084      	sub	sp, #16
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
 8003616:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800361e:	2b01      	cmp	r3, #1
 8003620:	d101      	bne.n	8003626 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003622:	2302      	movs	r3, #2
 8003624:	e02d      	b.n	8003682 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2224      	movs	r2, #36	; 0x24
 8003632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f022 0201 	bic.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	430a      	orrs	r2, r1
 8003660:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f812 	bl	800368c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2220      	movs	r2, #32
 8003674:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003698:	2b00      	cmp	r3, #0
 800369a:	d108      	bne.n	80036ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80036ac:	e031      	b.n	8003712 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80036ae:	2308      	movs	r3, #8
 80036b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80036b2:	2308      	movs	r3, #8
 80036b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	0e5b      	lsrs	r3, r3, #25
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	0f5b      	lsrs	r3, r3, #29
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80036d6:	7bbb      	ldrb	r3, [r7, #14]
 80036d8:	7b3a      	ldrb	r2, [r7, #12]
 80036da:	4911      	ldr	r1, [pc, #68]	; (8003720 <UARTEx_SetNbDataToProcess+0x94>)
 80036dc:	5c8a      	ldrb	r2, [r1, r2]
 80036de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80036e2:	7b3a      	ldrb	r2, [r7, #12]
 80036e4:	490f      	ldr	r1, [pc, #60]	; (8003724 <UARTEx_SetNbDataToProcess+0x98>)
 80036e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80036e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
 80036f6:	7b7a      	ldrb	r2, [r7, #13]
 80036f8:	4909      	ldr	r1, [pc, #36]	; (8003720 <UARTEx_SetNbDataToProcess+0x94>)
 80036fa:	5c8a      	ldrb	r2, [r1, r2]
 80036fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003700:	7b7a      	ldrb	r2, [r7, #13]
 8003702:	4908      	ldr	r1, [pc, #32]	; (8003724 <UARTEx_SetNbDataToProcess+0x98>)
 8003704:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003706:	fb93 f3f2 	sdiv	r3, r3, r2
 800370a:	b29a      	uxth	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003712:	bf00      	nop
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	080037c8 	.word	0x080037c8
 8003724:	080037d0 	.word	0x080037d0

08003728 <memset>:
 8003728:	4402      	add	r2, r0
 800372a:	4603      	mov	r3, r0
 800372c:	4293      	cmp	r3, r2
 800372e:	d100      	bne.n	8003732 <memset+0xa>
 8003730:	4770      	bx	lr
 8003732:	f803 1b01 	strb.w	r1, [r3], #1
 8003736:	e7f9      	b.n	800372c <memset+0x4>

08003738 <__libc_init_array>:
 8003738:	b570      	push	{r4, r5, r6, lr}
 800373a:	4d0d      	ldr	r5, [pc, #52]	; (8003770 <__libc_init_array+0x38>)
 800373c:	4c0d      	ldr	r4, [pc, #52]	; (8003774 <__libc_init_array+0x3c>)
 800373e:	1b64      	subs	r4, r4, r5
 8003740:	10a4      	asrs	r4, r4, #2
 8003742:	2600      	movs	r6, #0
 8003744:	42a6      	cmp	r6, r4
 8003746:	d109      	bne.n	800375c <__libc_init_array+0x24>
 8003748:	4d0b      	ldr	r5, [pc, #44]	; (8003778 <__libc_init_array+0x40>)
 800374a:	4c0c      	ldr	r4, [pc, #48]	; (800377c <__libc_init_array+0x44>)
 800374c:	f000 f818 	bl	8003780 <_init>
 8003750:	1b64      	subs	r4, r4, r5
 8003752:	10a4      	asrs	r4, r4, #2
 8003754:	2600      	movs	r6, #0
 8003756:	42a6      	cmp	r6, r4
 8003758:	d105      	bne.n	8003766 <__libc_init_array+0x2e>
 800375a:	bd70      	pop	{r4, r5, r6, pc}
 800375c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003760:	4798      	blx	r3
 8003762:	3601      	adds	r6, #1
 8003764:	e7ee      	b.n	8003744 <__libc_init_array+0xc>
 8003766:	f855 3b04 	ldr.w	r3, [r5], #4
 800376a:	4798      	blx	r3
 800376c:	3601      	adds	r6, #1
 800376e:	e7f2      	b.n	8003756 <__libc_init_array+0x1e>
 8003770:	080037e0 	.word	0x080037e0
 8003774:	080037e0 	.word	0x080037e0
 8003778:	080037e0 	.word	0x080037e0
 800377c:	080037e4 	.word	0x080037e4

08003780 <_init>:
 8003780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003782:	bf00      	nop
 8003784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003786:	bc08      	pop	{r3}
 8003788:	469e      	mov	lr, r3
 800378a:	4770      	bx	lr

0800378c <_fini>:
 800378c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800378e:	bf00      	nop
 8003790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003792:	bc08      	pop	{r3}
 8003794:	469e      	mov	lr, r3
 8003796:	4770      	bx	lr
